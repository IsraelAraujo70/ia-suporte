// Concatenated JavaScript/TypeScript with preserved variable names

// File: /home/israel/projetos/finance.ai/all-minified-code.js
import{TransactionCategory,TransactionPaymentMethod,TransactionType}from"@prisma/client";import{z}from"zod";export const upsertTransactionSchema=z.object({name:z.string().min(1),amount:z.number().positive(),type:z.nativeEnum(TransactionType),category:z.nativeEnum(TransactionCategory),paymentMethod:z.nativeEnum(TransactionPaymentMethod),date:z.date()});import{TransactionCategory,TransactionPaymentMethod,TransactionType}from"@prisma/client";export const TRANSACTION_TYPE_OPTIONS=[{value:TransactionType.EXPENSE,label:"Despesa"},{value:TransactionType.DEPOSIT,label:"Depósito"},{value:TransactionType.INVESTMENT,label:"Investimento"}];export const TRANSACTION_PAYMENT_METHOD_ICONS={[TransactionPaymentMethod.CREDIT_CARD]:"credit-card.svg",[TransactionPaymentMethod.DEBIT_CARD]:"debit-card.svg",[TransactionPaymentMethod.BANK_TRANSFER]:"bank-transfer.svg",[TransactionPaymentMethod.BANK_SLIP]:"bank-slip.svg",[TransactionPaymentMethod.CASH]:"money.svg",[TransactionPaymentMethod.PIX]:"pix.svg",[TransactionPaymentMethod.OTHER]:"other.svg"};export const TRANSACTION_CATEGORY_LABELS={EDUCATION:"Educação",ENTERTAINMENT:"Entretenimento",FOOD:"Alimentação",HEALTH:"Saúde",HOUSING:"Moradia",OTHER:"Outros",SALARY:"Salário",TRANSPORTATION:"Transporte",UTILITY:"Utilidades"};export const TRANSACTION_PAYMENT_METHOD_LABELS={BANK_TRANSFER:"Transferência Bancária",BANK_SLIP:"Boleto Bancário",CASH:"Dinheiro",CREDIT_CARD:"Cartão de Crédito",DEBIT_CARD:"Cartão de Débito",OTHER:"Outros",PIX:"Pix"};export const TRANSACTION_PAYMENT_METHOD_OPTIONS=[{value:TransactionPaymentMethod.CASH,label:"Dinheiro"},{value:TransactionPaymentMethod.DEBIT_CARD,label:"Cartão de débito"},{value:TransactionPaymentMethod.CREDIT_CARD,label:"Cartão de Crédito"},{value:TransactionPaymentMethod.BANK_TRANSFER,label:"Transferência bancária"},{value:TransactionPaymentMethod.PIX,label:"Pix"},{value:TransactionPaymentMethod.BANK_SLIP,label:"Boleto bancário"},{value:TransactionPaymentMethod.OTHER,label:"Outros"}];export const TRANSACTION_CATEGORY_OPTIONS=[{value:TransactionCategory.EDUCATION,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.EDUCATION]},{value:TransactionCategory.ENTERTAINMENT,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.ENTERTAINMENT]},{value:TransactionCategory.FOOD,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.FOOD]},{value:TransactionCategory.HEALTH,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.HEALTH]},{value:TransactionCategory.HOUSING,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.HOUSING]},{value:TransactionCategory.OTHER,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.OTHER]},{value:TransactionCategory.SALARY,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.SALARY]},{value:TransactionCategory.TRANSPORTATION,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.TRANSPORTATION]},{value:TransactionCategory.UTILITY,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.UTILITY]}];import{auth,clerkClient}from"@clerk/nextjs/server";import{getCurrentMonthTransactions}from"../get-current-month-transactions";export const canUserAddTransaction=async()=>{const{userId:userId}=await auth();if(!userId)throw new Error("Unauthorized");if("premium"===(await clerkClient().users.getUser(userId)).publicMetadata.subscriptionPlan)return!0;return!(await getCurrentMonthTransactions()>=10)};import{db}from"@/app/_lib/prisma";import{auth}from"@clerk/nextjs/server";import{endOfMonth,startOfMonth}from"date-fns";export const getCurrentMonthTransactions=async()=>{const{userId:userId}=await auth();if(!userId)throw new Error("Unauthorized");return db.transaction.count({where:{userId:userId,created:{gte:startOfMonth(new Date),lt:endOfMonth(new Date)}}})};import{auth}from"@clerk/nextjs/server";import Stripe from"stripe";export const createStripeCheckout=async()=>{const{userId:userId}=await auth();if(!userId)throw new Error("Unauthorized");if(!process.env.STRIPE_SECRET_KEY)throw new Error("Stripe secret key not found");const stripe=new Stripe(process.env.STRIPE_SECRET_KEY,{apiVersion:"2024-10-28.acacia"});return{sessionId:(await stripe.checkout.sessions.create({payment_method_types:["card"],mode:"subscription",success_url:"https:import{clerkMiddleware}from"@clerk/nextjs/server";export default clerkMiddleware();export const config={matcher:["/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)","/(api|trpc)(.*)"]};const fs=require("fs"),path=require("path"),{minify:minify}=require("terser"),{promisify:promisify}=require("util"),readFileAsync=promisify(fs.readFile),writeFileAsync=promisify(fs.writeFile),extensions=[".js",".jsx",".ts",".tsx"],ignoreDirs=["node_modules",".next",".git",".vscode"],terserOptions={compress:{dead_code:!0,drop_console:!1,drop_debugger:!0,keep_classnames:!0,keep_fargs:!0,keep_infinity:!0},mangle:!1,format:{comments:!1,beautify:!1},keep_classnames:!0,keep_fnames:!0},shouldProcessFile=filePath=>{const ext=path.extname(filePath).toLowerCase();return extensions.includes(ext)},shouldIgnoreDir=dirPath=>{const dirName=path.basename(dirPath);return ignoreDirs.includes(dirName)};async function findAllFiles(dir,fileList=[]){const files=fs.readdirSync(dir);for(const file of files){const filePath=path.join(dir,file);fs.statSync(filePath).isDirectory()?shouldIgnoreDir(filePath)||await findAllFiles(filePath,fileList):shouldProcessFile(filePath)&&fileList.push(filePath)}return fileList}async function minifyFile(filePath){try{const content=await readFileAsync(filePath,"utf8");return`\n module.exports={plugins:{tailwindcss:{},autoprefixer:{}}};
// File: /home/israel/projetos/finance.ai/app/(home)/_actions/generate-ai-report/index.ts
"use server";import{db}from "@/app/_lib/prisma";import{auth,clerkClient}from "@clerk/nextjs/server";import OpenAI from "openai";import{generateAiReportSchema}from "./schema";export const generateAiReport = async ({month,year,}:generateAiReportSchema) =>{const DUMMY_REPORT = '### Relatório de Finanças Pessoais\n\n#### Resumo Geral das Finanças\nAs transações listadas foram analisadas e as seguintes informações foram extraídas para oferecer insights sobre suas finanças:\n\n- **Total de despesas:** R$ 19.497,56\n- **Total de investimentos:** R$ 14.141,47\n- **Total de depósitos/correntes:** R$ 10.100,00 (considerando depósitos de salário e outros)\n- **Categoria de maior despesa:** Alimentação\n\n#### Análise por Categoria\n\n1. **Alimentação:** R$ 853,76\n2. **Transporte:** R$ 144,05\n3. **Entretenimento:** R$ 143,94\n4. **Outras despesas:** R$ 17.828,28 (inclui categorias como saúde,educação,habitação)\n\n#### Tendências e Insights\n- **Despesas Elevadas em Alimentação:** A categoria de alimentação representa uma parte significativa de suas despesas,com um total de R$ 853,76 nos últimos meses. É importante monitorar essa categoria para buscar economia.\n \n- **Despesas Variáveis:** Outros tipos de despesas,como entretenimento e transporte,também se acumulam ao longo do mês. Identificar dias em que se gasta mais pode ajudar a diminuir esses custos.\n \n- **Investimentos:** Você fez investimentos significativos na ordem de R$ 14.141,47. Isso é um bom sinal para a construção de patrimônio e aumento de sua segurança financeira no futuro.\n \n- **Categorização das Despesas:** Há uma série de despesas listadas como "OUTRA",que podem ser reavaliadas. Classificar essas despesas pode ajudar a ter um controle melhor das finanças.\n\n#### Dicas para Melhorar Sua Vida Financeira\n\n1. **Crie um Orçamento Mensal:** Defina um limite de gastos para cada categoria. Isso ajuda a evitar gastos excessivos em áreas como alimentação e entretenimento.\n\n2. **Reduza Gastos com Alimentação:** Considere cozinhar em casa com mais frequência,planejar refeições e usar listas de compras para evitar compras impulsivas.\n\n3. **Revise Despesas Recorrentes:** Dê uma olhada nas suas despesas fixas (como saúde e educação) para verificar se estão adequadas às suas necessidades e se há espaço para redução.\n\n4. **Estabeleça Metas de Poupança:** Com base em seus depósitos e investimentos,estabeleça metas específicas para economizar uma porcentagem do seu rendimento mensal. Estimar quanto você pode economizar pode ajudar a garantir uma reserva de emergência.\n\n5. **Diminua os Gastos com Entretenimento:** Planeje lazer de forma que não exceda seu orçamento,busque opções gratuitas ou de baixo custo. Lembre-se de que entretenimento também pode ser feito em casa.\n\n6. **Reavalie Seus Investimentos:** Certifique-se de que seus investimentos estejam alinhados com seus objetivos financeiros a curto e longo prazo. Pesquise alternativas que podem oferecer melhor retorno.\n\n7. **Acompanhe Suas Finanças Regularmente:** Use aplicativos de gerenciamento financeiro para controlar suas despesas e receitas,ajudando você a manter-se informado sobre sua saúde financeira.\n\n#### Conclusão\nMelhorar sua vida financeira é um processo contínuo que envolve planejamento,monitoramento e ajustes regulares. Com as análises e as sugestões acima,você pode começar a tomar decisões financeiras mais estratégicas para alcançar seus objetivos. Lembre-se que cada real economizado é um passo a mais em direção à segurança financeira!';generateAiReportSchema.parse({month,year});const{userId}= await auth();if (!userId){throw new Error("Unauthorized");}const user = await clerkClient().users.getUser(userId);const hasPremiumPlan = user.publicMetadata.subscriptionPlan === "premium";if (!hasPremiumPlan){throw new Error("Unauthorized");}if (!process.env.OPENAI_API_KEY){await new Promise((resolve) => setTimeout(resolve,1000));return DUMMY_REPORT;}const openAi = new OpenAI({apiKey:process.env.OPENAI_API_KEY,});const transactions = await db.transaction.findMany({where:{userId,date:{gte:new Date(`${year}-${month}-01`),lt:new Date(`${year}-${month}-31`),},},select:{date:true,type:true,amount:true,category:true,},});const content = `Gere um relatório com insights sobre as minhas finanças,com dicas e orientações de como melhorar a minha vida financeira. As transações são divididas por ponto e vírgula. A estrutura de cada uma é{DATA}-{TIPO}-{VALOR}-{CATEGORIA}. São elas:${transactions .map( (transaction) => `${transaction.date.toLocaleDateString("pt-BR")}-${transaction.type}-R$${transaction.amount}-${transaction.category}`,) .join(";")}`;const completion = await openAi.chat.completions.create({model:"gpt-4o",messages:[{role:"system",content:"Você é um especialista em gestão e organização de finanças pessoais. Você ajuda as pessoas a organizarem melhor as suas finanças.",},{role:"user",content,},],});return completion.choices[0].message.content;};
// File: /home/israel/projetos/finance.ai/app/(home)/_actions/generate-ai-report/schema.ts
import{isMatch}from "date-fns";import{z}from "zod";export const generateAiReportSchema = z.object({month:z.string().refine((value) => isMatch(value,"MM")),year:z .string() .regex(/^\d{4}$/) .optional() .default(() => new Date().getFullYear().toString()),});export type generateAiReportSchema = z.infer<typeof generateAiReportSchema>;
// File: /home/israel/projetos/finance.ai/app/(home)/_components/ai-report-button.tsx
"use client";import{Button}from "@/app/_components/ui/button";import{Dialog,DialogClose,DialogContent,DialogDescription,DialogFooter,DialogHeader,DialogTitle,DialogTrigger,}from "@/app/_components/ui/dialog";import{BotIcon,Loader2Icon}from "lucide-react";import{generateAiReport}from "../_actions/generate-ai-report";import{useState}from "react";import{ScrollArea}from "@/app/_components/ui/scroll-area";import Markdown from "react-markdown";import Link from "next/link";interface AiReportButtonProps{hasPremiumPlan:boolean;month:string;year:string;}const AiReportButton = ({month,year,hasPremiumPlan,}:AiReportButtonProps) =>{const [report,setReport] = useState<string | null>(null);const [reportIsLoading,setReportIsLoading] = useState(false);const handleGenerateReportClick = async () =>{try{setReportIsLoading(true);const aiReport = await generateAiReport({month,year});setReport(aiReport);}catch (error){console.error(error);}finally{setReportIsLoading(false);}};return ( <Dialog> <DialogTrigger asChild> <Button variant="ghost"> Relatório IA <BotIcon /> </Button> </DialogTrigger> <DialogContent className="max-w-[600px]">{hasPremiumPlan ? ( <> <DialogHeader> <DialogTitle>Relatório IA</DialogTitle> <DialogDescription> Use inteligência artificial para gerar um relatório com insights sobre suas finanças. </DialogDescription> </DialogHeader> <ScrollArea className="prose max-h-[450px] text-white prose-h3:text-white prose-h4:text-white prose-strong:text-white"> <Markdown>{report}</Markdown> </ScrollArea> <DialogFooter> <DialogClose asChild> <Button variant="ghost">Cancelar</Button> </DialogClose> <Button onClick={handleGenerateReportClick}disabled={reportIsLoading}>{reportIsLoading && <Loader2Icon className="animate-spin" />}{reportIsLoading ? "Gerando Relatório":"Gerar Relatório"}</Button> </DialogFooter> </> ):( <> <DialogHeader> <DialogTitle>Relatório IA</DialogTitle> <DialogDescription> Você precisa de um plano prêmium para gerar relatórios com IA </DialogDescription> </DialogHeader> <DialogFooter> <DialogClose asChild> <Button variant="ghost">Cancelar</Button> </DialogClose> <Button asChild> <Link href="/subscription">Assinar plano premium</Link> </Button> </DialogFooter> </> )}</DialogContent> </Dialog> );};export default AiReportButton;
// File: /home/israel/projetos/finance.ai/app/(home)/_components/desktop-nav-bar.tsx
"use client";import Link from "next/link";import Image from "next/image";import{UserButton}from "@clerk/nextjs";import{ThemeSwitcher}from "../../_components/theme-switcher";const DesktopNavbar = ({pathname}:{pathname:string}) =>{return ( <nav className="hidden justify-between border-b border-solid px-8 py-4 md:flex"> <div className="flex items-center gap-10"> <div className="flex items-center"> <Image src="/logo.svg" alt="" width={28}height={28}/> <h1 className="ms-3 text-2xl font-bold">agiFinance</h1> </div> <Link href="/" className={pathname === "/" ? "font-bold text-primary":"text-muted-foreground"}> Dashboard </Link> <Link href="/transactions" className={pathname === "/transactions" ? "font-bold text-primary":"text-muted-foreground"}> Transações </Link> <Link href="/subscription" className={pathname === "/subscription" ? "font-bold text-primary":"text-muted-foreground"}> Assinaturas </Link> </div> <div className="flex items-center gap-3"> <ThemeSwitcher /> <UserButton showName /> </div> </nav> );};export default DesktopNavbar;
// File: /home/israel/projetos/finance.ai/app/(home)/_components/expenses-per-category.tsx
import{CardContent,CardHeader,CardTitle}from "@/app/_components/ui/card";import{Progress}from "@/app/_components/ui/progress";import{ScrollArea}from "@/app/_components/ui/scroll-area";import{TRANSACTION_CATEGORY_LABELS}from "@/app/_constants/transactions";import{TotalExpensePerCategory}from "@/app/_data/get-dashboard/types";interface ExpensesPerCategoryProps{expensesPerCategory:TotalExpensePerCategory[];}const ExpensesPerCategory = ({expensesPerCategory,}:ExpensesPerCategoryProps) =>{return ( <ScrollArea className="col-span-2 h-full rounded-md border pb-6"> <CardHeader> <CardTitle className="font-bold">Gastos por Categoria</CardTitle> </CardHeader> <CardContent className="space-y-6">{expensesPerCategory.map((category) => ( <div key={category.category}className="space-y-2"> <div className="flex w-full justify-between"> <p className="text-sm font-bold">{TRANSACTION_CATEGORY_LABELS[category.category]}</p> <p className="text-sm font-bold">{category.percentageOfTotal}%</p> </div> <Progress value={category.percentageOfTotal}/> </div> ))}</CardContent> </ScrollArea> );};export default ExpensesPerCategory;
// File: /home/israel/projetos/finance.ai/app/(home)/_components/last-transactions.tsx
import{Button}from "@/app/_components/ui/button";import{CardContent,CardHeader,CardTitle}from "@/app/_components/ui/card";import{ScrollArea}from "@/app/_components/ui/scroll-area";import{formatCurrency}from "@/app/_utils/currency";import{Transaction,TransactionType}from "@prisma/client";import Link from "next/link";import Image from "next/image";import{TRANSACTION_PAYMENT_METHOD_ICONS}from "@/app/_constants/transactions";interface LastTransactionsProps{lastTransactions:Transaction[];}const LastTransactions = ({lastTransactions}:LastTransactionsProps) =>{const getAmountColor = (transaction:Transaction) =>{if (transaction.type === TransactionType.EXPENSE){return "text-red-500";}if (transaction.type === TransactionType.DEPOSIT){return "text-primary";}return "text-white";};const getAmountPrefix = (transaction:Transaction) =>{if (transaction.type === TransactionType.DEPOSIT){return "+";}return "-";};return ( <ScrollArea className="rounded-md border"> <CardHeader className="flex-row justify-between"> <CardTitle className="font-bold">Últimas Transações</CardTitle> <Button variant="outline" className="rounded-full font-bold" asChild> <Link href="/transactions">Ver mais</Link> </Button> </CardHeader> <CardContent className="space-y-6">{lastTransactions.map((transaction) => ( <div className="itens-center flex justify-between"> <div className="flex items-center gap-3"> <div className="rounded-md bg-white bg-opacity-[3%] p-3"> <Image src={TRANSACTION_PAYMENT_METHOD_ICONS[transaction.paymentMethod]}height={20}width={20}alt="Método de pagamento" /> </div> <div> <p className="text-sm font-bold">{transaction.name}</p> <p className="text-sm text-gray-400">{new Date(transaction.date).toLocaleDateString("pt-BR",{day:"2-digit",month:"short",year:"numeric",})}</p> </div> </div> <p className={`text-sm font-bold ${getAmountColor(transaction)}`}>{`${getAmountPrefix(transaction)}${formatCurrency(Number(transaction.amount))}`}</p> </div> ))}</CardContent> </ScrollArea> );};export default LastTransactions;
// File: /home/israel/projetos/finance.ai/app/(home)/_components/mobile-nav-bar.tsx
"use client";import Link from "next/link";import Image from "next/image";import{UserButton}from "@clerk/nextjs";import{Menu}from "lucide-react";import{Sheet,SheetContent,SheetTrigger}from "@/app/_components/sheet";import{ThemeSwitcher}from "../../_components/theme-switcher";const MobileNavbar = ({pathname}:{pathname:string}) =>{return ( <nav className="flex items-center justify-between border-b border-solid px-4 py-3 md:hidden"> <div className="flex items-center"> <Image src="/logo.svg" alt="agiFinance logo" width={24}height={24}/> <h1 className="ms-2 text-xl font-bold">agiFinance</h1> </div> <Sheet> <SheetTrigger asChild> <button className="p-2"> <Menu size={24}/> </button> </SheetTrigger> <SheetContent side="right" className="flex w-[250px] flex-col justify-between pt-12" > <div className="flex flex-col space-y-6 px-2"> <Link href="/" className={`text-lg ${pathname === "/" ? "font-bold text-primary":"text-muted-foreground"}`}> Dashboard </Link> <Link href="/transactions" className={`text-lg ${pathname === "/transactions" ? "font-bold text-primary":"text-muted-foreground"}`}> Transações </Link> <Link href="/subscription" className={`text-lg ${pathname === "/subscription" ? "font-bold text-primary":"text-muted-foreground"}`}> Assinaturas </Link> </div> <div className="mt-4 border-t pt-4"> <div className="flex items-center justify-between"> <UserButton showName /> <ThemeSwitcher /> </div> </div> </SheetContent> </Sheet> </nav> );};export default MobileNavbar;
// File: /home/israel/projetos/finance.ai/app/(home)/_components/percentage-item.tsx
import{ReactNode}from "react";interface PercentageItemProps{icon:ReactNode;title:string;value:number;}const PercentageItem = ({icon,title,value}:PercentageItemProps) =>{return ( <div className="flex items-center justify-between"> <div className="flex items-center gap-2"> <div className="rounded-lg bg-white bg-opacity-[3%] p-2">{icon}</div> <p className="text-sm text-muted-foreground">{title}</p> </div> <p className="text-sm font-bold">{value}%</p> </div> );};export default PercentageItem;
// File: /home/israel/projetos/finance.ai/app/(home)/_components/summary-card.tsx
import AddTransactionButton from "@/app/_components/add-transaction-button";import{Card,CardContent,CardHeader}from "@/app/_components/ui/card";import{ReactNode}from "react";interface SummaryCardProps{icon:ReactNode;title:string;amount:number;size?:"small" | "large";userCanAddTransaction?:boolean;}const SummaryCard = ({icon,title,amount,size = "small",userCanAddTransaction,}:SummaryCardProps) =>{return ( <Card className={`${size === "large" ? "bg-white bg-opacity-5":""}`}> <CardHeader className="flex-row items-center gap-4">{icon}<p className={`${size === "small" ? "text-muted-foreground":"text-white opacity-70"}`}>{title}</p> </CardHeader> <CardContent className={`flex ${size === "large" ? "flex-col gap-4 sm:flex-row sm:items-center sm:justify-between":"items-center justify-between"}`}> <p className={`font-bold ${size === "small" ? "text-2xl":"text-4xl"}`}>{Intl.NumberFormat("pt-BR",{style:"currency",currency:"BRL",}).format(amount)}</p>{size === "large" && ( <div className="w-full sm:w-auto"> <AddTransactionButton userCanAddTransaction={!!userCanAddTransaction}/> </div> )}</CardContent> </Card> );};export default SummaryCard;
// File: /home/israel/projetos/finance.ai/app/(home)/_components/summary-cards.tsx
import{PiggyBankIcon,TrendingDownIcon,TrendingUpIcon,WalletIcon,}from "lucide-react";import SummaryCard from "./summary-card";interface SummaryCards{month:string;year:string;balance:number;depositsTotal:number;investmentsTotal:number;expensesTotal:number;UserCanAddTransaction?:boolean;}const SummaryCards = async ({balance,investmentsTotal,depositsTotal,expensesTotal,UserCanAddTransaction,}:SummaryCards) =>{return ( <div className="space-y-4 sm:space-y-6"> <SummaryCard icon={<WalletIcon size={16}/>}title="Saldo" amount={balance}size="large" userCanAddTransaction={UserCanAddTransaction}/> <div className="grid grid-cols-1 gap-3 sm:grid-cols-2 sm:gap-6 md:grid-cols-3"> <SummaryCard icon={<PiggyBankIcon size={16}/>}title="Investido" amount={investmentsTotal}/> <SummaryCard icon={<TrendingUpIcon size={16}className="text-primary" />}title="Receita" amount={depositsTotal}/> <SummaryCard icon={<TrendingDownIcon size={16}className="text-danger" />}title="Despesa" amount={expensesTotal}/> </div> </div> );};export default SummaryCards;
// File: /home/israel/projetos/finance.ai/app/(home)/_components/time-select.tsx
"use client";import{Select,SelectContent,SelectItem,SelectTrigger,SelectValue,}from "@/app/_components/ui/select";import{useRouter,useSearchParams}from "next/navigation";const MONTH_OPTIONS = [{value:"01",label:"January"},{value:"02",label:"February"},{value:"03",label:"March"},{value:"04",label:"April"},{value:"05",label:"May"},{value:"06",label:"June"},{value:"07",label:"July"},{value:"08",label:"August"},{value:"09",label:"September"},{value:"10",label:"October"},{value:"11",label:"November"},{value:"12",label:"December"},];const generateYearOptions = () =>{const currentYear = new Date().getFullYear();const years = [];for (let i = currentYear - 5;i <= currentYear + 2;i++){years.push({value:i.toString(),label:i.toString()});}return years;};const YEAR_OPTIONS = generateYearOptions();const TimeSelect = () =>{const{push}= useRouter();const searchParams = useSearchParams();const currentMonth = (new Date().getMonth() + 1).toString().padStart(2,"0");const month = searchParams.get("month") || currentMonth;const year = searchParams.get("year") || new Date().getFullYear().toString();const currentYear = new Date().getFullYear().toString();const handleMonthChange = (newMonth:string) =>{push(`/?month=${newMonth}&year=${year}`);};const handleYearChange = (newYear:string) =>{push(`/?month=${month}&year=${newYear}`);};return ( <div className="flex items-center gap-1 sm:gap-2"> <Select onValueChange={(value) => handleMonthChange(value)}value={month}defaultValue={currentMonth}> <SelectTrigger className="w-[90px] text-xs sm:w-[120px] sm:text-sm"> <SelectValue placeholder="Mês" /> </SelectTrigger> <SelectContent>{MONTH_OPTIONS.map((option) => ( <SelectItem key={option.value}value={option.value}>{option.label}</SelectItem> ))}</SelectContent> </Select> <Select onValueChange={(value) => handleYearChange(value)}value={year}defaultValue={currentYear}> <SelectTrigger className="w-[80px] text-xs sm:w-[100px] sm:text-sm"> <SelectValue placeholder="Ano" /> </SelectTrigger> <SelectContent>{YEAR_OPTIONS.map((option) => ( <SelectItem key={option.value}value={option.value}>{option.label}</SelectItem> ))}</SelectContent> </Select> </div> );};export default TimeSelect;
// File: /home/israel/projetos/finance.ai/app/(home)/_components/transactions-pie-chart.tsx
"use client";import{Pie,PieChart}from "recharts";import{Card,CardContent}from "@/app/_components/ui/card";import{ChartConfig,ChartContainer,ChartTooltip,ChartTooltipContent,}from "@/app/_components/ui/chart";import{TransactionType}from "@prisma/client";import{TransactionPercentagePerType}from "@/app/_data/get-dashboard/types";import{PiggyBankIcon,TrendingDownIcon,TrendingUpIcon}from "lucide-react";import PercentageItem from "./percentage-item";const chartConfig ={[TransactionType.INVESTMENT]:{label:"Investido",color:"#FFFFFF",},[TransactionType.DEPOSIT]:{label:"Receita",color:"#5B802E",},[TransactionType.EXPENSE]:{label:"Despesas",color:"#E93030",},}satisfies ChartConfig;interface TransactionspieChartProps{typesPercentage:TransactionPercentagePerType;balance:number;depositsTotal:number;investmentsTotal:number;expensesTotal:number;}const TransactionsPieChart = ({investmentsTotal,depositsTotal,expensesTotal,typesPercentage,}:TransactionspieChartProps) =>{const chartData = [{type:TransactionType.DEPOSIT,amount:depositsTotal,fill:"#55B02E",},{type:TransactionType.INVESTMENT,amount:investmentsTotal,fill:"#FFFFFF",},{type:TransactionType.EXPENSE,amount:expensesTotal,fill:"#E93030",},];return ( <Card className="flex flex-col p-4 sm:p-6"> <CardContent className="flex-1 pb-0"> <ChartContainer config={chartConfig}className="mx-auto aspect-square max-h-[180px] sm:max-h-[250px]" > <PieChart> <ChartTooltip cursor={false}content={<ChartTooltipContent hideLabel />}/> <Pie data={chartData}dataKey="amount" nameKey="type" innerRadius={40}outerRadius="80%" /> </PieChart> </ChartContainer> <div className="mt-2 space-y-2 sm:mt-4"> <PercentageItem icon={<TrendingUpIcon size={14}className="text-primary sm:h-4 sm:w-4" />}title="Receitas" value={typesPercentage[TransactionType.DEPOSIT]}/> <PercentageItem icon={<TrendingDownIcon size={14}className="text-danger sm:h-4 sm:w-4" />}title="Despesas" value={typesPercentage[TransactionType.EXPENSE]}/> <PercentageItem icon={<PiggyBankIcon size={14}className="sm:h-4 sm:w-4" />}title="Investimentos" value={typesPercentage[TransactionType.INVESTMENT]}/> </div> </CardContent> </Card> );};export default TransactionsPieChart;
// File: /home/israel/projetos/finance.ai/app/(home)/page.tsx
import{auth,clerkClient}from "@clerk/nextjs/server";import{redirect}from "next/navigation";import Navbar from "../_components/navbar";import SummaryCards from "./_components/summary-cards";import TimeSelect from "./_components/time-select";import{isMatch}from "date-fns";import TransactionsPieChart from "./_components/transactions-pie-chart";import{getDashBoard}from "../_data/get-dashboard";import ExpensesPerCategory from "./_components/expenses-per-category";import LastTransactions from "./_components/last-transactions";import{canUserAddTransaction}from "../_data/can-user-add-transaction";import AiReportButton from "./_components/ai-report-button";import{ScrollArea}from "../_components/ui/scroll-area";interface HomeProps{searchParams:{month:string;year?:string;};}const Home = async ({searchParams:{month,year}}:HomeProps) =>{const{userId}= await auth();if (!userId){redirect("/login");}const currentMonth = (new Date().getMonth() + 1).toString().padStart(2,"0");const currentYear = new Date().getFullYear().toString();const monthIsInvalid = !month || !isMatch(month,"MM");const yearIsInvalid = year && !/^\d{4}$/.test(year);if (monthIsInvalid || yearIsInvalid){redirect(`?month=${currentMonth}&year=${currentYear}`);}const dashboard = await getDashBoard(month,year);const userCanAddTransactions = await canUserAddTransaction();const user = await clerkClient().users.getUser(userId);return ( <> <Navbar></Navbar> <div className="flex flex-col space-y-4 overflow-hidden p-4 sm:space-y-6 sm:p-6"> <div className="flex flex-col gap-3 sm:flex-row sm:justify-between sm:gap-0"> <h1 className="text-xl font-bold sm:text-2xl">DashBoard</h1> <div className="flex flex-wrap items-center gap-2 sm:gap-3"> <AiReportButton month={month}year={year || new Date().getFullYear().toString()}hasPremiumPlan={user.publicMetadata.subscriptionPlan === "premium"}/> <TimeSelect /> </div> </div> <div className="grid grid-cols-1 gap-4 overflow-hidden sm:gap-6 lg:grid-cols-[2fr,1fr]"> <ScrollArea className="h-auto sm:h-full"> <div className="flex flex-col gap-4 overflow-hidden sm:gap-6"> <SummaryCards month={month}year={year || new Date().getFullYear().toString()}{...dashboard}UserCanAddTransaction={userCanAddTransactions}/> <div className="grid grid-cols-1 gap-4 sm:gap-6 md:grid-cols-2 lg:grid-cols-3"> <TransactionsPieChart{...dashboard}/> <ExpensesPerCategory expensesPerCategory={dashboard.totalExpensePerCategory}/> </div> </div> </ScrollArea> <div className="mt-4 lg:mt-0"> <LastTransactions lastTransactions={dashboard.lastTransactions}/> </div> </div> </div> </> );};export default Home;
// File: /home/israel/projetos/finance.ai/app/_actions/add-transaction/index.ts
"use server";import{db}from "@/app/_lib/prisma";import{auth}from "@clerk/nextjs/server";import{TransactionCategory,TransactionPaymentMethod,TransactionType,}from "@prisma/client";import{upsertTransactionSchema}from "./schema";import{revalidatePath}from "next/cache";interface UpsertTransactionParams{id?:string;name:string;amount:number;type:TransactionType;category:TransactionCategory;paymentMethod:TransactionPaymentMethod;date:Date;}export const upsertTransaction = async (params:UpsertTransactionParams) =>{upsertTransactionSchema.parse(params);const{userId}= await auth();if (!userId){throw new Error("Unauthorized");}if (params.id){await db.transaction.upsert({update:{...params,userId},create:{...params,userId},where:{id:params.id ?? "",},});}else{await db.transaction.create({data:{...params,userId},});}revalidatePath("/transactions");};
// File: /home/israel/projetos/finance.ai/app/_actions/add-transaction/schema.ts
import{TransactionCategory,TransactionPaymentMethod,TransactionType,}from "@prisma/client";import{z}from "zod";export const upsertTransactionSchema = z.object({name:z.string().min(1),amount:z.number().positive(),type:z.nativeEnum(TransactionType),category:z.nativeEnum(TransactionCategory),paymentMethod:z.nativeEnum(TransactionPaymentMethod),date:z.date(),});
// File: /home/israel/projetos/finance.ai/app/_components/add-transaction-button.tsx
"use client";import{ArrowDownUpIcon}from "lucide-react";import{Button}from "./ui/button";import UpsertTransactionDialog from "./upsert-transaction-dialog";import{useState}from "react";import{Tooltip,TooltipContent,TooltipProvider,TooltipTrigger,}from "./ui/tooltip";interface AddTransactionButtonProps{userCanAddTransaction:boolean;}const AddTransactionButton = ({userCanAddTransaction,}:AddTransactionButtonProps) =>{const [dialogIsOpen,setDialogIsOpen] = useState(false);const handleDialogClose = (shouldRefresh:boolean = false) =>{setDialogIsOpen(false);if (shouldRefresh){window.location.reload();}};return ( <> <TooltipProvider> <Tooltip> <TooltipTrigger asChild> <Button className="rounded-full font-bold" onClick={() => setDialogIsOpen(true)}disabled={!userCanAddTransaction}> Adicionar transação <ArrowDownUpIcon /> </Button> </TooltipTrigger> <TooltipContent>{!userCanAddTransaction && "Você atingiu o seu limite de transações. Atualize o seu plano para criar transações ilimitadas!"}</TooltipContent> </Tooltip> </TooltipProvider> <UpsertTransactionDialog isOpen={dialogIsOpen}setIsOpen={(isOpen) =>{if (!isOpen){handleDialogClose(true);}else{setDialogIsOpen(true);}}}/> </> );};export default AddTransactionButton;
// File: /home/israel/projetos/finance.ai/app/_components/logo.tsx
import Image from "next/image";const Logo = () =>{return ( <div className="mb-8 flex items-center"> <Image src="/logo.svg" alt="" width={39}height={39}/> <h1 className="ms-3 text-2xl font-bold">agiFinance</h1> </div> );};export default Logo;
// File: /home/israel/projetos/finance.ai/app/_components/money-input.tsx
import React,{forwardRef}from "react";import{NumericFormat,NumericFormatProps}from "react-number-format";import{Input,InputProps}from "@/app/_components/ui/input";export const MoneyInput = forwardRef( ( props:NumericFormatProps<InputProps>,ref:React.ForwardedRef<HTMLInputElement>,) =>{return ( <NumericFormat{...props}thousandSeparator="." decimalSeparator="," prefix="R$" allowNegative={false}customInput={Input}getInputRef={ref}/> );},);MoneyInput.displayName = "MoneyInput";
// File: /home/israel/projetos/finance.ai/app/_components/navbar.tsx
"use client";import{usePathname}from "next/navigation";import MobileNavbar from "../(home)/_components/mobile-nav-bar";import DesktopNavbar from "../(home)/_components/desktop-nav-bar";const Navbar = () =>{const pathname = usePathname();return ( <>{}<MobileNavbar pathname={pathname}/>{}<DesktopNavbar pathname={pathname}/> </> );};export default Navbar;
// File: /home/israel/projetos/finance.ai/app/_components/sheet.tsx
"use client";import * as React from "react";import * as SheetPrimitive from "@radix-ui/react-dialog";import{cva,type VariantProps}from "class-variance-authority";import{X}from "lucide-react";import{cn}from "@/app/_lib/utils";const Sheet = SheetPrimitive.Root;const SheetTrigger = SheetPrimitive.Trigger;const SheetClose = SheetPrimitive.Close;const SheetPortal = SheetPrimitive.Portal;const SheetOverlay = React.forwardRef< React.ElementRef<typeof SheetPrimitive.Overlay>,React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay> >(({className,...props},ref) => ( <SheetPrimitive.Overlay className={cn( "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",className,)}{...props}ref={ref}/> ));SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;const sheetVariants = cva( "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",{variants:{side:{top:"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",bottom:"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",left:"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",right:"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",},},defaultVariants:{side:"right",},},);interface SheetContentProps extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,VariantProps<typeof sheetVariants>{}const SheetContent = React.forwardRef< React.ElementRef<typeof SheetPrimitive.Content>,SheetContentProps >(({side = "right",className,children,...props},ref) => ( <SheetPortal> <SheetOverlay /> <SheetPrimitive.Content ref={ref}className={cn(sheetVariants({side}),className)}{...props}>{children}<SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary"> <X className="h-4 w-4" /> <span className="sr-only">Close</span> </SheetPrimitive.Close> </SheetPrimitive.Content> </SheetPortal> ));SheetContent.displayName = SheetPrimitive.Content.displayName;const SheetHeader = ({className,...props}:React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( "flex flex-col space-y-2 text-center sm:text-left",className,)}{...props}/> );SheetHeader.displayName = "SheetHeader";const SheetFooter = ({className,...props}:React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",className,)}{...props}/> );SheetFooter.displayName = "SheetFooter";const SheetTitle = React.forwardRef< React.ElementRef<typeof SheetPrimitive.Title>,React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title> >(({className,...props},ref) => ( <SheetPrimitive.Title ref={ref}className={cn("text-lg font-semibold text-foreground",className)}{...props}/> ));SheetTitle.displayName = SheetPrimitive.Title.displayName;const SheetDescription = React.forwardRef< React.ElementRef<typeof SheetPrimitive.Description>,React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description> >(({className,...props},ref) => ( <SheetPrimitive.Description ref={ref}className={cn("text-sm text-muted-foreground",className)}{...props}/> ));SheetDescription.displayName = SheetPrimitive.Description.displayName;export{Sheet,SheetPortal,SheetOverlay,SheetTrigger,SheetClose,SheetContent,SheetHeader,SheetFooter,SheetTitle,SheetDescription,};
// File: /home/israel/projetos/finance.ai/app/_components/theme-switcher.tsx
"use client";import{useTheme}from "next-themes";import{Button}from "./ui/button";import{MoonIcon,SunIcon}from "lucide-react";import{useEffect,useState}from "react";export function ThemeSwitcher(){const{theme,setTheme}= useTheme();const [mounted,setMounted] = useState(false);useEffect(() =>{setMounted(true);},[]);if (!mounted){return null;}return ( <Button variant="ghost" size="icon" onClick={() => setTheme(theme === "light" ? "dark":"light")}aria-label="Alternar tema" className="rounded-full" >{theme === "light" ? ( <MoonIcon className="h-5 w-5" /> ):( <SunIcon className="h-5 w-5" /> )}</Button> );}
// File: /home/israel/projetos/finance.ai/app/_components/ui/alert-dialog.tsx
"use client";import * as React from "react";import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";import{cn}from "@/app/_lib/utils";import{buttonVariants}from "@/app/_components/ui/button";const AlertDialog = AlertDialogPrimitive.Root;const AlertDialogTrigger = AlertDialogPrimitive.Trigger;const AlertDialogPortal = AlertDialogPrimitive.Portal;const AlertDialogOverlay = React.forwardRef< React.ElementRef<typeof AlertDialogPrimitive.Overlay>,React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay> >(({className,...props},ref) => ( <AlertDialogPrimitive.Overlay className={cn( "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",className,)}{...props}ref={ref}/> ));AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;const AlertDialogContent = React.forwardRef< React.ElementRef<typeof AlertDialogPrimitive.Content>,React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content> >(({className,...props},ref) => ( <AlertDialogPortal> <AlertDialogOverlay /> <AlertDialogPrimitive.Content ref={ref}className={cn( "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",className,)}{...props}/> </AlertDialogPortal> ));AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;const AlertDialogHeader = ({className,...props}:React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( "flex flex-col space-y-2 text-center sm:text-left",className,)}{...props}/> );AlertDialogHeader.displayName = "AlertDialogHeader";const AlertDialogFooter = ({className,...props}:React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",className,)}{...props}/> );AlertDialogFooter.displayName = "AlertDialogFooter";const AlertDialogTitle = React.forwardRef< React.ElementRef<typeof AlertDialogPrimitive.Title>,React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title> >(({className,...props},ref) => ( <AlertDialogPrimitive.Title ref={ref}className={cn("text-lg font-semibold",className)}{...props}/> ));AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;const AlertDialogDescription = React.forwardRef< React.ElementRef<typeof AlertDialogPrimitive.Description>,React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description> >(({className,...props},ref) => ( <AlertDialogPrimitive.Description ref={ref}className={cn("text-sm text-muted-foreground",className)}{...props}/> ));AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName;const AlertDialogAction = React.forwardRef< React.ElementRef<typeof AlertDialogPrimitive.Action>,React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action> >(({className,...props},ref) => ( <AlertDialogPrimitive.Action ref={ref}className={cn(buttonVariants(),className)}{...props}/> ));AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;const AlertDialogCancel = React.forwardRef< React.ElementRef<typeof AlertDialogPrimitive.Cancel>,React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel> >(({className,...props},ref) => ( <AlertDialogPrimitive.Cancel ref={ref}className={cn( buttonVariants({variant:"outline"}),"mt-2 sm:mt-0",className,)}{...props}/> ));AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;export{AlertDialog,AlertDialogPortal,AlertDialogOverlay,AlertDialogTrigger,AlertDialogContent,AlertDialogHeader,AlertDialogFooter,AlertDialogTitle,AlertDialogDescription,AlertDialogAction,AlertDialogCancel,};
// File: /home/israel/projetos/finance.ai/app/_components/ui/badge.tsx
import * as React from "react";import{cva,type VariantProps}from "class-variance-authority";import{cn}from "@/app/_lib/utils";const badgeVariants = cva( "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",{variants:{variant:{default:"border-transparent bg-primary text-primary-foreground hover:bg-primary/80",secondary:"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",destructive:"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",outline:"text-foreground",},},defaultVariants:{variant:"default",},},);export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>,VariantProps<typeof badgeVariants>{}function Badge({className,variant,...props}:BadgeProps){return ( <div className={cn(badgeVariants({variant}),className)}{...props}/> );}export{Badge,badgeVariants};
// File: /home/israel/projetos/finance.ai/app/_components/ui/button.tsx
import * as React from "react";import{Slot}from "@radix-ui/react-slot";import{cva,type VariantProps}from "class-variance-authority";import{cn}from "@/app/_lib/utils";const buttonVariants = cva( "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-bold ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",{variants:{variant:{default:"bg-primary text-primary-foreground hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90",outline:"border border-input bg-background hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline",},size:{default:"h-10 px-4 py-2",sm:"h-9 rounded-md px-3",lg:"h-11 rounded-md px-8",icon:"h-10 w-10",},},defaultVariants:{variant:"default",size:"default",},},);export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>,VariantProps<typeof buttonVariants>{asChild?:boolean;}const Button = React.forwardRef<HTMLButtonElement,ButtonProps>( ({className,variant,size,asChild = false,...props},ref) =>{const Comp = asChild ? Slot:"button";return ( <Comp className={cn(buttonVariants({variant,size,className}))}ref={ref}{...props}/> );},);Button.displayName = "Button";export{Button,buttonVariants};
// File: /home/israel/projetos/finance.ai/app/_components/ui/calendar.tsx
"use client";import * as React from "react";import{ChevronLeft,ChevronRight}from "lucide-react";import{DayPicker}from "react-day-picker";import{cn}from "@/app/_lib/utils";import{buttonVariants}from "@/app/_components/ui/button";export type CalendarProps = React.ComponentProps<typeof DayPicker>;function Calendar({className,classNames,showOutsideDays = true,...props}:CalendarProps){return ( <DayPicker showOutsideDays={showOutsideDays}className={cn("p-3",className)}classNames={{months:"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",month:"space-y-4",caption:"flex justify-center pt-1 relative items-center",caption_label:"text-sm font-medium",nav:"space-x-1 flex items-center",nav_button:cn( buttonVariants({variant:"outline"}),"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",),nav_button_previous:"absolute left-1",nav_button_next:"absolute right-1",table:"w-full border-collapse space-y-1",head_row:"flex",head_cell:"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",row:"flex w-full mt-2",cell:"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",day:cn( buttonVariants({variant:"ghost"}),"h-9 w-9 p-0 font-normal aria-selected:opacity-100",),day_range_end:"day-range-end",day_selected:"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",day_today:"bg-accent text-accent-foreground",day_outside:"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",day_disabled:"text-muted-foreground opacity-50",day_range_middle:"aria-selected:bg-accent aria-selected:text-accent-foreground",day_hidden:"invisible",...classNames,}}components={{IconLeft:() => <ChevronLeft className="h-4 w-4" />,IconRight:() => <ChevronRight className="h-4 w-4" />,}}{...props}/> );}Calendar.displayName = "Calendar";export{Calendar};
// File: /home/israel/projetos/finance.ai/app/_components/ui/card.tsx
import * as React from "react";import{cn}from "@/app/_lib/utils";const Card = React.forwardRef< HTMLDivElement,React.HTMLAttributes<HTMLDivElement> >(({className,...props},ref) => ( <div ref={ref}className={cn( "rounded-lg border bg-card text-card-foreground shadow-sm",className,)}{...props}/> ));Card.displayName = "Card";const CardHeader = React.forwardRef< HTMLDivElement,React.HTMLAttributes<HTMLDivElement> >(({className,...props},ref) => ( <div ref={ref}className={cn("flex flex-col space-y-1.5 p-6",className)}{...props}/> ));CardHeader.displayName = "CardHeader";const CardTitle = React.forwardRef< HTMLDivElement,React.HTMLAttributes<HTMLDivElement> >(({className,...props},ref) => ( <div ref={ref}className={cn( "text-2xl font-semibold leading-none tracking-tight",className,)}{...props}/> ));CardTitle.displayName = "CardTitle";const CardDescription = React.forwardRef< HTMLDivElement,React.HTMLAttributes<HTMLDivElement> >(({className,...props},ref) => ( <div ref={ref}className={cn("text-sm text-muted-foreground",className)}{...props}/> ));CardDescription.displayName = "CardDescription";const CardContent = React.forwardRef< HTMLDivElement,React.HTMLAttributes<HTMLDivElement> >(({className,...props},ref) => ( <div ref={ref}className={cn("p-6 pt-0",className)}{...props}/> ));CardContent.displayName = "CardContent";const CardFooter = React.forwardRef< HTMLDivElement,React.HTMLAttributes<HTMLDivElement> >(({className,...props},ref) => ( <div ref={ref}className={cn("flex items-center p-6 pt-0",className)}{...props}/> ));CardFooter.displayName = "CardFooter";export{Card,CardHeader,CardFooter,CardTitle,CardDescription,CardContent,};
// File: /home/israel/projetos/finance.ai/app/_components/ui/chart.tsx
"use client";import * as React from "react";import * as RechartsPrimitive from "recharts";import{cn}from "@/app/_lib/utils";const THEMES ={light:"",dark:".dark"}as const;export type ChartConfig ={[k in string]:{label?:React.ReactNode;icon?:React.ComponentType;}& ( |{color?:string;theme?:never}|{color?:never;theme:Record<keyof typeof THEMES,string>});};type ChartContextProps ={config:ChartConfig;};const ChartContext = React.createContext<ChartContextProps | null>(null);function useChart(){const context = React.useContext(ChartContext);if (!context){throw new Error("useChart must be used within a <ChartContainer />");}return context;}const ChartContainer = React.forwardRef< HTMLDivElement,React.ComponentProps<"div"> &{config:ChartConfig;children:React.ComponentProps< typeof RechartsPrimitive.ResponsiveContainer >["children"];}>(({id,className,children,config,...props},ref) =>{const uniqueId = React.useId();const chartId = `chart-${id || uniqueId.replace(/:/g,"")}`;return ( <ChartContext.Provider value={{config}}> <div data-chart={chartId}ref={ref}className={cn( "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",className,)}{...props}> <ChartStyle id={chartId}config={config}/> <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer> </div> </ChartContext.Provider> );});ChartContainer.displayName = "Chart";const ChartStyle = ({id,config}:{id:string;config:ChartConfig}) =>{const colorConfig = Object.entries(config).filter( ([,config]) => config.theme || config.color,);if (!colorConfig.length){return null;}return ( <style dangerouslySetInnerHTML={{__html:Object.entries(THEMES) .map( ([theme,prefix]) => ` ${prefix}[data-chart=${id}]{${colorConfig .map(([key,itemConfig]) =>{const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;return color ? ` --color-${key}:${color};`:null;}) .join("\n")}}`,) .join("\n"),}}/> );};const ChartTooltip = RechartsPrimitive.Tooltip;const ChartTooltipContent = React.forwardRef< HTMLDivElement,React.ComponentProps<typeof RechartsPrimitive.Tooltip> & React.ComponentProps<"div"> &{hideLabel?:boolean;hideIndicator?:boolean;indicator?:"line" | "dot" | "dashed";nameKey?:string;labelKey?:string;}>( ({active,payload,className,indicator = "dot",hideLabel = false,hideIndicator = false,label,labelFormatter,labelClassName,formatter,color,nameKey,labelKey,},ref,) =>{const{config}= useChart();const tooltipLabel = React.useMemo(() =>{if (hideLabel || !payload?.length){return null;}const [item] = payload;const key = `${labelKey || item.dataKey || item.name || "value"}`;const itemConfig = getPayloadConfigFromPayload(config,item,key);const value = !labelKey && typeof label === "string" ? config[label as keyof typeof config]?.label || label:itemConfig?.label;if (labelFormatter){return ( <div className={cn("font-medium",labelClassName)}>{labelFormatter(value,payload)}</div> );}if (!value){return null;}return <div className={cn("font-medium",labelClassName)}>{value}</div>;},[ label,labelFormatter,payload,hideLabel,labelClassName,config,labelKey,]);if (!active || !payload?.length){return null;}const nestLabel = payload.length === 1 && indicator !== "dot";return ( <div ref={ref}className={cn( "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",className,)}>{!nestLabel ? tooltipLabel:null}<div className="grid gap-1.5">{payload.map((item,index) =>{const key = `${nameKey || item.name || item.dataKey || "value"}`;const itemConfig = getPayloadConfigFromPayload(config,item,key);const indicatorColor = color || item.payload.fill || item.color;return ( <div key={item.dataKey}className={cn( "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",indicator === "dot" && "items-center",)}>{formatter && item?.value !== undefined && item.name ? ( formatter(item.value,item.name,item,index,item.payload) ):( <>{itemConfig?.icon ? ( <itemConfig.icon /> ):( !hideIndicator && ( <div className={cn( "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",{"h-2.5 w-2.5":indicator === "dot","w-1":indicator === "line","w-0 border-[1.5px] border-dashed bg-transparent":indicator === "dashed","my-0.5":nestLabel && indicator === "dashed",},)}style={{"--color-bg":indicatorColor,"--color-border":indicatorColor,}as React.CSSProperties}/> ) )}<div className={cn( "flex flex-1 justify-between leading-none",nestLabel ? "items-end":"items-center",)}> <div className="grid gap-1.5">{nestLabel ? tooltipLabel:null}<span className="text-muted-foreground">{itemConfig?.label || item.name}</span> </div>{item.value && ( <span className="font-mono font-medium tabular-nums text-foreground">{item.value.toLocaleString()}</span> )}</div> </> )}</div> );})}</div> </div> );},);ChartTooltipContent.displayName = "ChartTooltip";const ChartLegend = RechartsPrimitive.Legend;const ChartLegendContent = React.forwardRef< HTMLDivElement,React.ComponentProps<"div"> & Pick<RechartsPrimitive.LegendProps,"payload" | "verticalAlign"> &{hideIcon?:boolean;nameKey?:string;}>( ({className,hideIcon = false,payload,verticalAlign = "bottom",nameKey},ref,) =>{const{config}= useChart();if (!payload?.length){return null;}return ( <div ref={ref}className={cn( "flex items-center justify-center gap-4",verticalAlign === "top" ? "pb-3":"pt-3",className,)}>{payload.map((item) =>{const key = `${nameKey || item.dataKey || "value"}`;const itemConfig = getPayloadConfigFromPayload(config,item,key);return ( <div key={item.value}className={cn( "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground",)}>{itemConfig?.icon && !hideIcon ? ( <itemConfig.icon /> ):( <div className="h-2 w-2 shrink-0 rounded-[2px]" style={{backgroundColor:item.color,}}/> )}{itemConfig?.label}</div> );})}</div> );},);ChartLegendContent.displayName = "ChartLegend";function getPayloadConfigFromPayload( config:ChartConfig,payload:unknown,key:string,){if (typeof payload !== "object" || payload === null){return undefined;}const payloadPayload = "payload" in payload && typeof payload.payload === "object" && payload.payload !== null ? payload.payload:undefined;let configLabelKey:string = key;if ( key in payload && typeof payload[key as keyof typeof payload] === "string" ){configLabelKey = payload[key as keyof typeof payload] as string;}else if ( payloadPayload && key in payloadPayload && typeof payloadPayload[key as keyof typeof payloadPayload] === "string" ){configLabelKey = payloadPayload[ key as keyof typeof payloadPayload ] as string;}return configLabelKey in config ? config[configLabelKey]:config[key as keyof typeof config];}export{ChartContainer,ChartTooltip,ChartTooltipContent,ChartLegend,ChartLegendContent,ChartStyle,};
// File: /home/israel/projetos/finance.ai/app/_components/ui/command.tsx
"use client";import * as React from "react";import{type DialogProps}from "@radix-ui/react-dialog";import{Command as CommandPrimitive}from "cmdk";import{Search}from "lucide-react";import{cn}from "@/app/_lib/utils";import{Dialog,DialogContent}from "@/app/_components/ui/dialog";const Command = React.forwardRef< React.ElementRef<typeof CommandPrimitive>,React.ComponentPropsWithoutRef<typeof CommandPrimitive> >(({className,...props},ref) => ( <CommandPrimitive ref={ref}className={cn( "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",className,)}{...props}/> ));Command.displayName = CommandPrimitive.displayName;interface CommandDialogProps extends DialogProps{}const CommandDialog = ({children,...props}:CommandDialogProps) =>{return ( <Dialog{...props}> <DialogContent className="overflow-hidden p-0 shadow-lg"> <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">{children}</Command> </DialogContent> </Dialog> );};const CommandInput = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Input>,React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input> >(({className,...props},ref) => ( <div className="flex items-center border-b px-3" cmdk-input-wrapper=""> <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" /> <CommandPrimitive.Input ref={ref}className={cn( "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",className,)}{...props}/> </div> ));CommandInput.displayName = CommandPrimitive.Input.displayName;const CommandList = React.forwardRef< React.ElementRef<typeof CommandPrimitive.List>,React.ComponentPropsWithoutRef<typeof CommandPrimitive.List> >(({className,...props},ref) => ( <CommandPrimitive.List ref={ref}className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden",className)}{...props}/> ));CommandList.displayName = CommandPrimitive.List.displayName;const CommandEmpty = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Empty>,React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty> >((props,ref) => ( <CommandPrimitive.Empty ref={ref}className="py-6 text-center text-sm"{...props}/> ));CommandEmpty.displayName = CommandPrimitive.Empty.displayName;const CommandGroup = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Group>,React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group> >(({className,...props},ref) => ( <CommandPrimitive.Group ref={ref}className={cn( "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",className,)}{...props}/> ));CommandGroup.displayName = CommandPrimitive.Group.displayName;const CommandSeparator = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Separator>,React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator> >(({className,...props},ref) => ( <CommandPrimitive.Separator ref={ref}className={cn("-mx-1 h-px bg-border",className)}{...props}/> ));CommandSeparator.displayName = CommandPrimitive.Separator.displayName;const CommandItem = React.forwardRef< React.ElementRef<typeof CommandPrimitive.Item>,React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item> >(({className,...props},ref) => ( <CommandPrimitive.Item ref={ref}className={cn( "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",className,)}{...props}/> ));CommandItem.displayName = CommandPrimitive.Item.displayName;const CommandShortcut = ({className,...props}:React.HTMLAttributes<HTMLSpanElement>) =>{return ( <span className={cn( "ml-auto text-xs tracking-widest text-muted-foreground",className,)}{...props}/> );};CommandShortcut.displayName = "CommandShortcut";export{Command,CommandDialog,CommandInput,CommandList,CommandEmpty,CommandGroup,CommandItem,CommandShortcut,CommandSeparator,};
// File: /home/israel/projetos/finance.ai/app/_components/ui/data-table.tsx
"use client";import{useEffect,useState}from "react";import{ColumnDef,flexRender,getCoreRowModel,useReactTable,}from "@tanstack/react-table";import{Table,TableBody,TableCell,TableHead,TableHeader,TableRow,}from "./table";interface DataTableProps<TData,TValue>{columns:ColumnDef<TData,TValue>[];data:TData[];}export function DataTable<TData,TValue>({columns,data,}:DataTableProps<TData,TValue>){const [isMobile,setIsMobile] = useState(false);useEffect(() =>{const checkIfMobile = () =>{setIsMobile(window.innerWidth < 768);};checkIfMobile();window.addEventListener("resize",checkIfMobile);return () => window.removeEventListener("resize",checkIfMobile);},[]);const visibleColumns = columns.filter((column) =>{if (!isMobile) return true;const accessorKey = typeof column.id === "string" ? column.id:"accessorKey" in column && typeof ( column as ColumnDef<TData,TValue> &{accessorKey?:string}).accessorKey === "string" ? (column as ColumnDef<TData,TValue> &{accessorKey?:string}) .accessorKey:undefined;return accessorKey !== "category" && accessorKey !== "paymentMethod";});const table = useReactTable({data,columns:visibleColumns,getCoreRowModel:getCoreRowModel(),});return ( <div className="rounded-md border"> <div className="overflow-x-auto"> <Table className="w-full table-fixed md:table-auto"> <TableHeader>{table.getHeaderGroups().map((headerGroup) => ( <TableRow key={headerGroup.id}>{headerGroup.headers.map((header) => ( <TableHead key={header.id}className="whitespace-nowrap px-2 py-2 text-xs font-medium sm:px-4 sm:py-3 sm:text-sm" >{header.isPlaceholder ? null:flexRender( header.column.columnDef.header,header.getContext(),)}</TableHead> ))}</TableRow> ))}</TableHeader> <TableBody>{table.getRowModel().rows?.length ? ( table.getRowModel().rows.map((row) => ( <TableRow key={row.id}data-state={row.getIsSelected() && "selected"}className="border-b hover:bg-muted/30" >{row.getVisibleCells().map((cell) =>{const isActionsColumn = cell.column.id === "actions";return ( <TableCell key={cell.id}className={`px-2 py-1.5 text-xs sm:px-4 sm:py-3 sm:text-sm ${isActionsColumn ? "text-center":""}`}>{flexRender( cell.column.columnDef.cell,cell.getContext(),)}</TableCell> );})}</TableRow> )) ):( <TableRow> <TableCell colSpan={columns.length}className="h-24 text-center" > Nenhum resultado encontrado. </TableCell> </TableRow> )}</TableBody> </Table> </div> </div> );}
// File: /home/israel/projetos/finance.ai/app/_components/ui/date-picker.tsx
"use client";import * as React from "react";import{ptBR}from "date-fns/locale";import{Calendar as CalendarIcon}from "lucide-react";import{cn}from "@/app/_lib/utils";import{Button}from "./button";import{Calendar}from "./calendar";import{Popover,PopoverContent,PopoverTrigger}from "./popover";import{SelectSingleEventHandler}from "react-day-picker";interface DatePickerProps{value?:Date;onChange?:SelectSingleEventHandler;}export const DatePicker = ({value,onChange}:DatePickerProps) =>{return ( <Popover> <PopoverTrigger asChild> <Button variant={"outline"}className={cn( "w-full justify-start text-left font-normal",!value && "text-muted-foreground",)}> <CalendarIcon className="mr-2 h-4 w-4" />{value ? ( new Date(value).toLocaleDateString("pt-BR",{day:"2-digit",month:"long",year:"numeric",}) ):( <span>Selecione uma data</span> )}</Button> </PopoverTrigger> <PopoverContent className="w-auto p-0"> <Calendar mode="single" selected={value}onSelect={onChange}initialFocus locale={ptBR}/> </PopoverContent> </Popover> );};
// File: /home/israel/projetos/finance.ai/app/_components/ui/dialog.tsx
"use client";import * as React from "react";import * as DialogPrimitive from "@radix-ui/react-dialog";import{X}from "lucide-react";import{cn}from "@/app/_lib/utils";const Dialog = DialogPrimitive.Root;const DialogTrigger = DialogPrimitive.Trigger;const DialogPortal = DialogPrimitive.Portal;const DialogClose = DialogPrimitive.Close;const DialogOverlay = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Overlay>,React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay> >(({className,...props},ref) => ( <DialogPrimitive.Overlay ref={ref}className={cn( "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",className,)}{...props}/> ));DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;const DialogContent = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Content>,React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> >(({className,children,...props},ref) => ( <DialogPortal> <DialogOverlay /> <DialogPrimitive.Content ref={ref}className={cn( "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",className,)}{...props}>{children}<DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"> <X className="h-4 w-4" /> <span className="sr-only">Close</span> </DialogPrimitive.Close> </DialogPrimitive.Content> </DialogPortal> ));DialogContent.displayName = DialogPrimitive.Content.displayName;const DialogHeader = ({className,...props}:React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( "flex flex-col space-y-1.5 text-center sm:text-left",className,)}{...props}/> );DialogHeader.displayName = "DialogHeader";const DialogFooter = ({className,...props}:React.HTMLAttributes<HTMLDivElement>) => ( <div className={cn( "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",className,)}{...props}/> );DialogFooter.displayName = "DialogFooter";const DialogTitle = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Title>,React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title> >(({className,...props},ref) => ( <DialogPrimitive.Title ref={ref}className={cn( "text-lg font-semibold leading-none tracking-tight",className,)}{...props}/> ));DialogTitle.displayName = DialogPrimitive.Title.displayName;const DialogDescription = React.forwardRef< React.ElementRef<typeof DialogPrimitive.Description>,React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description> >(({className,...props},ref) => ( <DialogPrimitive.Description ref={ref}className={cn("text-sm text-muted-foreground",className)}{...props}/> ));DialogDescription.displayName = DialogPrimitive.Description.displayName;export{Dialog,DialogPortal,DialogOverlay,DialogClose,DialogTrigger,DialogContent,DialogHeader,DialogFooter,DialogTitle,DialogDescription,};
// File: /home/israel/projetos/finance.ai/app/_components/ui/form.tsx
"use client";import * as React from "react";import * as LabelPrimitive from "@radix-ui/react-label";import{Slot}from "@radix-ui/react-slot";import{Controller,ControllerProps,FieldPath,FieldValues,FormProvider,useFormContext,}from "react-hook-form";import{cn}from "@/app/_lib/utils";import{Label}from "@/app/_components/ui/label";const Form = FormProvider;type FormFieldContextValue< TFieldValues extends FieldValues = FieldValues,TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,> ={name:TName;};const FormFieldContext = React.createContext<FormFieldContextValue>({}as FormFieldContextValue,);const FormField = < TFieldValues extends FieldValues = FieldValues,TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,>({...props}:ControllerProps<TFieldValues,TName>) =>{return ( <FormFieldContext.Provider value={{name:props.name}}> <Controller{...props}/> </FormFieldContext.Provider> );};const useFormField = () =>{const fieldContext = React.useContext(FormFieldContext);const itemContext = React.useContext(FormItemContext);const{getFieldState,formState}= useFormContext();const fieldState = getFieldState(fieldContext.name,formState);if (!fieldContext){throw new Error("useFormField should be used within <FormField>");}const{id}= itemContext;return{id,name:fieldContext.name,formItemId:`${id}-form-item`,formDescriptionId:`${id}-form-item-description`,formMessageId:`${id}-form-item-message`,...fieldState,};};type FormItemContextValue ={id:string;};const FormItemContext = React.createContext<FormItemContextValue>({}as FormItemContextValue,);const FormItem = React.forwardRef< HTMLDivElement,React.HTMLAttributes<HTMLDivElement> >(({className,...props},ref) =>{const id = React.useId();return ( <FormItemContext.Provider value={{id}}> <div ref={ref}className={cn("space-y-2",className)}{...props}/> </FormItemContext.Provider> );});FormItem.displayName = "FormItem";const FormLabel = React.forwardRef< React.ElementRef<typeof LabelPrimitive.Root>,React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> >(({className,...props},ref) =>{const{error,formItemId}= useFormField();return ( <Label ref={ref}className={cn(error && "text-destructive",className)}htmlFor={formItemId}{...props}/> );});FormLabel.displayName = "FormLabel";const FormControl = React.forwardRef< React.ElementRef<typeof Slot>,React.ComponentPropsWithoutRef<typeof Slot> >(({...props},ref) =>{const{error,formItemId,formDescriptionId,formMessageId}= useFormField();return ( <Slot ref={ref}id={formItemId}aria-describedby={!error ? `${formDescriptionId}`:`${formDescriptionId}${formMessageId}`}aria-invalid={!!error}{...props}/> );});FormControl.displayName = "FormControl";const FormDescription = React.forwardRef< HTMLParagraphElement,React.HTMLAttributes<HTMLParagraphElement> >(({className,...props},ref) =>{const{formDescriptionId}= useFormField();return ( <p ref={ref}id={formDescriptionId}className={cn("text-sm text-muted-foreground",className)}{...props}/> );});FormDescription.displayName = "FormDescription";const FormMessage = React.forwardRef< HTMLParagraphElement,React.HTMLAttributes<HTMLParagraphElement> >(({className,children,...props},ref) =>{const{error,formMessageId}= useFormField();const body = error ? String(error?.message):children;if (!body){return null;}return ( <p ref={ref}id={formMessageId}className={cn("text-sm font-medium text-destructive",className)}{...props}>{body}</p> );});FormMessage.displayName = "FormMessage";export{useFormField,Form,FormItem,FormLabel,FormControl,FormDescription,FormMessage,FormField,};
// File: /home/israel/projetos/finance.ai/app/_components/ui/input.tsx
import * as React from "react";import{cn}from "@/app/_lib/utils";export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement>{}const Input = React.forwardRef<HTMLInputElement,InputProps>( ({className,type,...props},ref) =>{return ( <input type={type}className={cn( "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",className,)}ref={ref}{...props}/> );},);Input.displayName = "Input";export{Input};
// File: /home/israel/projetos/finance.ai/app/_components/ui/label.tsx
"use client";import * as React from "react";import * as LabelPrimitive from "@radix-ui/react-label";import{cva,type VariantProps}from "class-variance-authority";import{cn}from "@/app/_lib/utils";const labelVariants = cva( "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",);const Label = React.forwardRef< React.ElementRef<typeof LabelPrimitive.Root>,React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants> >(({className,...props},ref) => ( <LabelPrimitive.Root ref={ref}className={cn(labelVariants(),className)}{...props}/> ));Label.displayName = LabelPrimitive.Root.displayName;export{Label};
// File: /home/israel/projetos/finance.ai/app/_components/ui/popover.tsx
"use client";import * as React from "react";import * as PopoverPrimitive from "@radix-ui/react-popover";import{cn}from "@/app/_lib/utils";const Popover = PopoverPrimitive.Root;const PopoverTrigger = PopoverPrimitive.Trigger;const PopoverContent = React.forwardRef< React.ElementRef<typeof PopoverPrimitive.Content>,React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content> >(({className,align = "center",sideOffset = 4,...props},ref) => ( <PopoverPrimitive.Portal> <PopoverPrimitive.Content ref={ref}align={align}sideOffset={sideOffset}className={cn( "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",className,)}{...props}/> </PopoverPrimitive.Portal> ));PopoverContent.displayName = PopoverPrimitive.Content.displayName;export{Popover,PopoverTrigger,PopoverContent};
// File: /home/israel/projetos/finance.ai/app/_components/ui/progress.tsx
"use client";import * as React from "react";import * as ProgressPrimitive from "@radix-ui/react-progress";import{cn}from "@/app/_lib/utils";const Progress = React.forwardRef< React.ElementRef<typeof ProgressPrimitive.Root>,React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root> >(({className,value,...props},ref) => ( <ProgressPrimitive.Root ref={ref}className={cn( "relative h-4 w-full overflow-hidden rounded-full bg-white bg-opacity-[3%]",className,)}{...props}> <ProgressPrimitive.Indicator className="h-full w-full flex-1 bg-[#71717A] transition-all" style={{transform:`translateX(-${100 - (value || 0)}%)`}}/> </ProgressPrimitive.Root> ));Progress.displayName = ProgressPrimitive.Root.displayName;export{Progress};
// File: /home/israel/projetos/finance.ai/app/_components/ui/scroll-area.tsx
"use client";import * as React from "react";import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";import{cn}from "@/app/_lib/utils";const ScrollArea = React.forwardRef< React.ElementRef<typeof ScrollAreaPrimitive.Root>,React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root> >(({className,children,...props},ref) => ( <ScrollAreaPrimitive.Root ref={ref}className={cn("relative overflow-hidden",className)}{...props}> <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">{children}</ScrollAreaPrimitive.Viewport> <ScrollBar /> <ScrollAreaPrimitive.Corner /> </ScrollAreaPrimitive.Root> ));ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;const ScrollBar = React.forwardRef< React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar> >(({className,orientation = "vertical",...props},ref) => ( <ScrollAreaPrimitive.ScrollAreaScrollbar ref={ref}orientation={orientation}className={cn( "flex touch-none select-none transition-colors",orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]",orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-[1px]",className,)}{...props}> <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" /> </ScrollAreaPrimitive.ScrollAreaScrollbar> ));ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;export{ScrollArea,ScrollBar};
// File: /home/israel/projetos/finance.ai/app/_components/ui/select.tsx
"use client";import * as React from "react";import * as SelectPrimitive from "@radix-ui/react-select";import{Check,ChevronDown,ChevronUp}from "lucide-react";import{cn}from "@/app/_lib/utils";const Select = SelectPrimitive.Root;const SelectGroup = SelectPrimitive.Group;const SelectValue = SelectPrimitive.Value;const SelectTrigger = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Trigger>,React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger> >(({className,children,...props},ref) => ( <SelectPrimitive.Trigger ref={ref}className={cn( "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",className,)}{...props}>{children}<SelectPrimitive.Icon asChild> <ChevronDown className="h-4 w-4 opacity-50" /> </SelectPrimitive.Icon> </SelectPrimitive.Trigger> ));SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;const SelectScrollUpButton = React.forwardRef< React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton> >(({className,...props},ref) => ( <SelectPrimitive.ScrollUpButton ref={ref}className={cn( "flex cursor-default items-center justify-center py-1",className,)}{...props}> <ChevronUp className="h-4 w-4" /> </SelectPrimitive.ScrollUpButton> ));SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;const SelectScrollDownButton = React.forwardRef< React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton> >(({className,...props},ref) => ( <SelectPrimitive.ScrollDownButton ref={ref}className={cn( "flex cursor-default items-center justify-center py-1",className,)}{...props}> <ChevronDown className="h-4 w-4" /> </SelectPrimitive.ScrollDownButton> ));SelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName;const SelectContent = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Content>,React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content> >(({className,children,position = "popper",...props},ref) => ( <SelectPrimitive.Portal> <SelectPrimitive.Content ref={ref}className={cn( "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",position === "popper" && "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",className,)}position={position}{...props}> <SelectScrollUpButton /> <SelectPrimitive.Viewport className={cn( "p-1",position === "popper" && "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",)}>{children}</SelectPrimitive.Viewport> <SelectScrollDownButton /> </SelectPrimitive.Content> </SelectPrimitive.Portal> ));SelectContent.displayName = SelectPrimitive.Content.displayName;const SelectLabel = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Label>,React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label> >(({className,...props},ref) => ( <SelectPrimitive.Label ref={ref}className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold",className)}{...props}/> ));SelectLabel.displayName = SelectPrimitive.Label.displayName;const SelectItem = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Item>,React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item> >(({className,children,...props},ref) => ( <SelectPrimitive.Item ref={ref}className={cn( "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",className,)}{...props}> <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center"> <SelectPrimitive.ItemIndicator> <Check className="h-4 w-4" /> </SelectPrimitive.ItemIndicator> </span> <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText> </SelectPrimitive.Item> ));SelectItem.displayName = SelectPrimitive.Item.displayName;const SelectSeparator = React.forwardRef< React.ElementRef<typeof SelectPrimitive.Separator>,React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator> >(({className,...props},ref) => ( <SelectPrimitive.Separator ref={ref}className={cn("-mx-1 my-1 h-px bg-muted",className)}{...props}/> ));SelectSeparator.displayName = SelectPrimitive.Separator.displayName;export{Select,SelectGroup,SelectValue,SelectTrigger,SelectContent,SelectLabel,SelectItem,SelectSeparator,SelectScrollUpButton,SelectScrollDownButton,};
// File: /home/israel/projetos/finance.ai/app/_components/ui/sonner.tsx
"use client";import{useTheme}from "next-themes";import{Toaster as Sonner}from "sonner";type ToasterProps = React.ComponentProps<typeof Sonner>;const Toaster = ({...props}:ToasterProps) =>{const{theme = "system"}= useTheme();return ( <Sonner theme={theme as ToasterProps["theme"]}className="toaster group" toastOptions={{classNames:{toast:"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",description:"group-[.toast]:text-muted-foreground",actionButton:"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",cancelButton:"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",},}}{...props}/> );};export{Toaster};
// File: /home/israel/projetos/finance.ai/app/_components/ui/table.tsx
import * as React from "react";import{cn}from "@/app/_lib/utils";const Table = React.forwardRef< HTMLTableElement,React.HTMLAttributes<HTMLTableElement> >(({className,...props},ref) => ( <div className="relative w-full overflow-auto"> <table ref={ref}className={cn("w-full caption-bottom text-sm",className)}{...props}/> </div> ));Table.displayName = "Table";const TableHeader = React.forwardRef< HTMLTableSectionElement,React.HTMLAttributes<HTMLTableSectionElement> >(({className,...props},ref) => ( <thead ref={ref}className={cn("[&_tr]:border-b",className)}{...props}/> ));TableHeader.displayName = "TableHeader";const TableBody = React.forwardRef< HTMLTableSectionElement,React.HTMLAttributes<HTMLTableSectionElement> >(({className,...props},ref) => ( <tbody ref={ref}className={cn("[&_tr:last-child]:border-0",className)}{...props}/> ));TableBody.displayName = "TableBody";const TableFooter = React.forwardRef< HTMLTableSectionElement,React.HTMLAttributes<HTMLTableSectionElement> >(({className,...props},ref) => ( <tfoot ref={ref}className={cn( "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",className,)}{...props}/> ));TableFooter.displayName = "TableFooter";const TableRow = React.forwardRef< HTMLTableRowElement,React.HTMLAttributes<HTMLTableRowElement> >(({className,...props},ref) => ( <tr ref={ref}className={cn( "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",className,)}{...props}/> ));TableRow.displayName = "TableRow";const TableHead = React.forwardRef< HTMLTableCellElement,React.ThHTMLAttributes<HTMLTableCellElement> >(({className,...props},ref) => ( <th ref={ref}className={cn( "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",className,)}{...props}/> ));TableHead.displayName = "TableHead";const TableCell = React.forwardRef< HTMLTableCellElement,React.TdHTMLAttributes<HTMLTableCellElement> >(({className,...props},ref) => ( <td ref={ref}className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0",className)}{...props}/> ));TableCell.displayName = "TableCell";const TableCaption = React.forwardRef< HTMLTableCaptionElement,React.HTMLAttributes<HTMLTableCaptionElement> >(({className,...props},ref) => ( <caption ref={ref}className={cn("mt-4 text-sm text-muted-foreground",className)}{...props}/> ));TableCaption.displayName = "TableCaption";export{Table,TableHeader,TableBody,TableFooter,TableHead,TableRow,TableCell,TableCaption,};
// File: /home/israel/projetos/finance.ai/app/_components/ui/tooltip.tsx
"use client";import * as React from "react";import * as TooltipPrimitive from "@radix-ui/react-tooltip";import{cn}from "@/app/_lib/utils";const TooltipProvider = TooltipPrimitive.Provider;const Tooltip = TooltipPrimitive.Root;const TooltipTrigger = TooltipPrimitive.Trigger;const TooltipContent = React.forwardRef< React.ElementRef<typeof TooltipPrimitive.Content>,React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> >(({className,sideOffset = 4,...props},ref) => ( <TooltipPrimitive.Content ref={ref}sideOffset={sideOffset}className={cn( "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",className,)}{...props}/> ));TooltipContent.displayName = TooltipPrimitive.Content.displayName;export{Tooltip,TooltipTrigger,TooltipContent,TooltipProvider};
// File: /home/israel/projetos/finance.ai/app/_components/upsert-transaction-dialog.tsx
import{Button}from "./ui/button";import{DialogContent,Dialog,DialogTrigger,DialogHeader,DialogTitle,DialogDescription,DialogFooter,DialogClose,}from "./ui/dialog";import{Form,FormControl,FormField,FormItem,FormLabel,FormMessage,}from "./ui/form";import{Input}from "./ui/input";import{MoneyInput}from "./money-input";import{Select,SelectContent,SelectItem,SelectTrigger,SelectValue,}from "./ui/select";import{TRANSACTION_CATEGORY_OPTIONS,TRANSACTION_PAYMENT_METHOD_OPTIONS,TRANSACTION_TYPE_OPTIONS,}from "../_constants/transactions";import{DatePicker}from "./ui/date-picker";import{z}from "zod";import{zodResolver}from "@hookform/resolvers/zod";import{useForm}from "react-hook-form";import{TransactionCategory,TransactionPaymentMethod,TransactionType,}from "@prisma/client";import{upsertTransaction}from "../_actions/add-transaction";interface UpsertTransactionDialogProps{isOpen:boolean;defaultValues?:FormSchema;transactionId?:string;setIsOpen:(isOpen:boolean) => void;}type FormSchema = z.infer<typeof formSchema>;const formSchema = z.object({name:z.string().trim().min(1,{message:"O nome é obrigatório.",}),amount:z .number({required_error:"O valor é obrigatório",}) .positive({message:"O valor deve ser positivo",}),type:z.nativeEnum(TransactionType,{required_error:"O tipo é obrigatório.",}),category:z.nativeEnum(TransactionCategory,{required_error:"A categoria é obrigatória.",}),paymentMethod:z.nativeEnum(TransactionPaymentMethod,{required_error:"O método de pagamento é obrigatória.",}),date:z.date({required_error:"A data é obrigatória.",}),});const UpsertTransactionDialog = ({isOpen,setIsOpen,defaultValues,transactionId,}:UpsertTransactionDialogProps) =>{const currentTransactionId = transactionId;const form = useForm<FormSchema>({resolver:zodResolver(formSchema),defaultValues:defaultValues ??{amount:0,category:TransactionCategory.OTHER,date:new Date(),name:"",paymentMethod:TransactionPaymentMethod.CASH,type:TransactionType.EXPENSE,},});const onSubmit = async (data:FormSchema) =>{try{await upsertTransaction({...data,id:currentTransactionId});setIsOpen(false);form.reset();window.location.reload();}catch (error){console.log(error);}};const isUpdate = Boolean(transactionId);return ( <Dialog open={isOpen}onOpenChange={(open) =>{setIsOpen(open);if (!open){form.reset();}}}> <DialogTrigger asChild></DialogTrigger> <DialogContent> <DialogHeader> <DialogTitle>{isUpdate ? "Atualizar":"Adicionar"}Transação </DialogTitle> <DialogDescription>Insira as informações a baixo:</DialogDescription> </DialogHeader> <Form{...form}> <form onSubmit={form.handleSubmit(onSubmit)}className="space-y-8"> <FormField control={form.control}name="name" render={({field}) => ( <FormItem> <FormLabel>Nome</FormLabel> <FormControl> <Input placeholder="Digite o nome..."{...field}/> </FormControl> <FormMessage /> </FormItem> )}/> <FormField control={form.control}name="amount" render={({field}) => ( <FormItem> <FormLabel>Valor</FormLabel> <FormControl> <MoneyInput placeholder="Digite o Valor..." value={field.value}onValueChange={({floatValue}) =>{field.onChange(floatValue);}}onBlur={field.onBlur}disabled={field.disabled}/> </FormControl> <FormMessage /> </FormItem> )}/> <FormField control={form.control}name="type" render={({field}) => ( <FormItem> <FormLabel>Tipo</FormLabel> <Select onValueChange={field.onChange}defaultValue={field.value}> <FormControl> <SelectTrigger> <SelectValue placeholder="Select a verified email to display" /> </SelectTrigger> </FormControl> <SelectContent>{TRANSACTION_TYPE_OPTIONS.map((option) => ( <SelectItem key={option.value}value={option.value}>{option.label}</SelectItem> ))}</SelectContent> </Select> <FormMessage /> </FormItem> )}/> <FormField control={form.control}name="paymentMethod" render={({field}) => ( <FormItem> <FormLabel>Método de pagamento</FormLabel> <Select onValueChange={field.onChange}defaultValue={field.value}> <FormControl> <SelectTrigger> <SelectValue placeholder="Selecione um método de pagamento" /> </SelectTrigger> </FormControl> <SelectContent>{TRANSACTION_PAYMENT_METHOD_OPTIONS.map((option) => ( <SelectItem key={option.value}value={option.value}>{option.label}</SelectItem> ))}</SelectContent> </Select> <FormMessage /> </FormItem> )}/> <FormField control={form.control}name="category" render={({field}) => ( <FormItem> <FormLabel>Categoria</FormLabel> <Select onValueChange={field.onChange}defaultValue={field.value}> <FormControl> <SelectTrigger> <SelectValue placeholder="Selecione uma categoria" /> </SelectTrigger> </FormControl> <SelectContent>{TRANSACTION_CATEGORY_OPTIONS.map((option) => ( <SelectItem key={option.value}value={option.value}>{option.label}</SelectItem> ))}</SelectContent> </Select> <FormMessage /> </FormItem> )}/> <FormField control={form.control}name="date" render={({field}) => ( <FormItem> <FormLabel>Data</FormLabel> <DatePicker value={field.value}onChange={field.onChange}/> <FormMessage /> </FormItem> )}/> <DialogFooter> <DialogClose asChild> <Button type="button" variant="outline"> Cancelar </Button> </DialogClose> <Button type="submit">{isUpdate ? "Atualizar":"Adicionar"}</Button> </DialogFooter> </form> </Form> </DialogContent> </Dialog> );};export default UpsertTransactionDialog;
// File: /home/israel/projetos/finance.ai/app/_constants/transactions.tsx
import{TransactionCategory,TransactionPaymentMethod,TransactionType,}from "@prisma/client";export const TRANSACTION_TYPE_OPTIONS = [{value:TransactionType.EXPENSE,label:"Despesa",},{value:TransactionType.DEPOSIT,label:"Depósito",},{value:TransactionType.INVESTMENT,label:"Investimento",},];export const TRANSACTION_PAYMENT_METHOD_ICONS ={[TransactionPaymentMethod.CREDIT_CARD]:"credit-card.svg",[TransactionPaymentMethod.DEBIT_CARD]:"debit-card.svg",[TransactionPaymentMethod.BANK_TRANSFER]:"bank-transfer.svg",[TransactionPaymentMethod.BANK_SLIP]:"bank-slip.svg",[TransactionPaymentMethod.CASH]:"money.svg",[TransactionPaymentMethod.PIX]:"pix.svg",[TransactionPaymentMethod.OTHER]:"other.svg",};export const TRANSACTION_CATEGORY_LABELS ={EDUCATION:"Educação",ENTERTAINMENT:"Entretenimento",FOOD:"Alimentação",HEALTH:"Saúde",HOUSING:"Moradia",OTHER:"Outros",SALARY:"Salário",TRANSPORTATION:"Transporte",UTILITY:"Utilidades",};export const TRANSACTION_PAYMENT_METHOD_LABELS ={BANK_TRANSFER:"Transferência Bancária",BANK_SLIP:"Boleto Bancário",CASH:"Dinheiro",CREDIT_CARD:"Cartão de Crédito",DEBIT_CARD:"Cartão de Débito",OTHER:"Outros",PIX:"Pix",};export const TRANSACTION_PAYMENT_METHOD_OPTIONS = [{value:TransactionPaymentMethod.CASH,label:"Dinheiro",},{value:TransactionPaymentMethod.DEBIT_CARD,label:"Cartão de débito",},{value:TransactionPaymentMethod.CREDIT_CARD,label:"Cartão de Crédito",},{value:TransactionPaymentMethod.BANK_TRANSFER,label:"Transferência bancária",},{value:TransactionPaymentMethod.PIX,label:"Pix",},{value:TransactionPaymentMethod.BANK_SLIP,label:"Boleto bancário",},{value:TransactionPaymentMethod.OTHER,label:"Outros",},];export const TRANSACTION_CATEGORY_OPTIONS = [{value:TransactionCategory.EDUCATION,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.EDUCATION],},{value:TransactionCategory.ENTERTAINMENT,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.ENTERTAINMENT],},{value:TransactionCategory.FOOD,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.FOOD],},{value:TransactionCategory.HEALTH,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.HEALTH],},{value:TransactionCategory.HOUSING,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.HOUSING],},{value:TransactionCategory.OTHER,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.OTHER],},{value:TransactionCategory.SALARY,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.SALARY],},{value:TransactionCategory.TRANSPORTATION,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.TRANSPORTATION],},{value:TransactionCategory.UTILITY,label:TRANSACTION_CATEGORY_LABELS[TransactionCategory.UTILITY],},];
// File: /home/israel/projetos/finance.ai/app/_data/can-user-add-transaction/index.ts
import{auth,clerkClient}from "@clerk/nextjs/server";import{getCurrentMonthTransactions}from "../get-current-month-transactions";export const canUserAddTransaction = async () =>{const{userId}= await auth();if (!userId){throw new Error("Unauthorized");}const user = await clerkClient().users.getUser(userId);if (user.publicMetadata.subscriptionPlan === "premium"){return true;}const currentMonthTransactions = await getCurrentMonthTransactions();if (currentMonthTransactions >= 10){return false;}return true;};
// File: /home/israel/projetos/finance.ai/app/_data/get-current-month-transactions/index.ts
import{db}from "@/app/_lib/prisma";import{auth}from "@clerk/nextjs/server";import{endOfMonth,startOfMonth}from "date-fns";export const getCurrentMonthTransactions = async () =>{const{userId}= await auth();if (!userId){throw new Error("Unauthorized");}return db.transaction.count({where:{userId,created:{gte:startOfMonth(new Date()),lt:endOfMonth(new Date()),},},});};
// File: /home/israel/projetos/finance.ai/app/_data/get-dashboard/index.ts
import{db}from "@/app/_lib/prisma";import{TransactionType}from "@prisma/client";import{TotalExpensePerCategory,TransactionPercentagePerType}from "./types";import{auth}from "@clerk/nextjs/server";export const getDashBoard = async (month:string,year?:string) =>{const{userId}= await auth();if (!userId){throw new Error("Unauthorized");}const currentYear = year || new Date().getFullYear().toString();const where ={userId,date:{gte:new Date(`${currentYear}-${month}-01`),lt:new Date(`${currentYear}-${month}-31`),},};const depositsTotal = Number( ( await db.transaction.aggregate({where:{...where,type:"DEPOSIT"},_sum:{amount:true},}) )?._sum?.amount,);const investmentsTotal = Number( ( await db.transaction.aggregate({where:{...where,type:"INVESTMENT"},_sum:{amount:true},}) )?._sum?.amount,);const expensesTotal = Number( ( await db.transaction.aggregate({where:{...where,type:"EXPENSE"},_sum:{amount:true},}) )?._sum?.amount,);const balance = depositsTotal - investmentsTotal - expensesTotal;const transactionsTotal = Number( ( await db.transaction.aggregate({where,_sum:{amount:true},}) )._sum.amount,);const typesPercentage:TransactionPercentagePerType ={[TransactionType.DEPOSIT]:Math.round( (Number(depositsTotal || 0) / Number(transactionsTotal)) * 100,),[TransactionType.EXPENSE]:Math.round( (Number(expensesTotal || 0) / Number(transactionsTotal)) * 100,),[TransactionType.INVESTMENT]:Math.round( (Number(investmentsTotal || 0) / Number(transactionsTotal)) * 100,),};const totalExpensePerCategory:TotalExpensePerCategory[] = ( await db.transaction.groupBy({by:["category"],where:{...where,type:TransactionType.EXPENSE,},_sum:{amount:true,},}) ).map((category) => ({category:category.category,totalAmount:Number(category._sum.amount),percentageOfTotal:Math.round( (Number(category._sum.amount) / Number(expensesTotal)) * 100,),}));const lastTransactions = await db.transaction.findMany({where,orderBy:{date:"desc"},take:10,});return{balance,depositsTotal,investmentsTotal,expensesTotal,typesPercentage,totalExpensePerCategory,lastTransactions:JSON.parse(JSON.stringify(lastTransactions)),};};
// File: /home/israel/projetos/finance.ai/app/_data/get-dashboard/types.ts
import{TransactionCategory,TransactionType}from "@prisma/client";export type TransactionPercentagePerType ={[key in TransactionType]:number;};export interface TotalExpensePerCategory{category:TransactionCategory;totalAmount:number;percentageOfTotal:number;}
// File: /home/israel/projetos/finance.ai/app/_lib/prisma.ts
import{PrismaClient}from "@prisma/client";declare global{var cachedPrisma:PrismaClient;}let prisma:PrismaClient;if (process.env.NODE_ENV === "production"){prisma = new PrismaClient();}else{if (!global.cachedPrisma){global.cachedPrisma = new PrismaClient();}prisma = global.cachedPrisma;}export const db = prisma;
// File: /home/israel/projetos/finance.ai/app/_lib/utils.ts
import{clsx,type ClassValue}from "clsx" import{twMerge}from "tailwind-merge" export function cn(...inputs:ClassValue[]){return twMerge(clsx(inputs))}
// File: /home/israel/projetos/finance.ai/app/_utils/currency.ts
export const formatCurrency = (value:number) =>{return new Intl.NumberFormat("pr-br",{style:"currency",currency:"BRL",}).format(value);};
// File: /home/israel/projetos/finance.ai/app/api/webhooks/stripe/route.ts
import{clerkClient}from "@clerk/nextjs/server";import{NextResponse}from "next/server";import Stripe from "stripe";export const POST = async (request:Request) =>{if (!process.env.STRIPE_SECRET_KEY || !process.env.STRIPE_WEBHOOK_SECRET){return NextResponse.error();}const signature = request.headers.get("stripe-signature");if (!signature){return NextResponse.error();}const text = await request.text();const stripe = new Stripe(process.env.STRIPE_SECRET_KEY,{apiVersion:"2024-10-28.acacia",});if (!process.env.STRIPE_WEBHOOK_SECRET){throw NextResponse.error();}const event = stripe.webhooks.constructEvent( text,signature,process.env.STRIPE_WEBHOOK_SECRET,);switch (event.type){case "invoice.paid":{const{customer,subscription,subscription_details}= event.data.object;const clerkUserId = subscription_details?.metadata?.clerk_user_id;if (!clerkUserId){return NextResponse.error();}await clerkClient().users.updateUser(clerkUserId,{privateMetadata:{stripeCustomerId:customer,stripeSubscriptionId:subscription,},publicMetadata:{subscriptionPlan:"premium",},});break;}case "customer.subscription.deleted":{const subscription = await stripe.subscriptions.retrieve( event.data.object.id,);const clerkUserId = subscription.metadata.clerk_user_id;if (!clerkUserId){return NextResponse.error();}await clerkClient().users.updateUser(clerkUserId,{privateMetadata:{stripeCustomerId:null,stripeSubscriptionId:null,},publicMetadata:{subscriptionPlan:null,},});break;}}return NextResponse.json({received:true,});};
// File: /home/israel/projetos/finance.ai/app/layout.tsx
import type{Metadata}from "next";import{Mulish}from "next/font/google";import "./globals.css";import{ClerkProvider}from "@clerk/nextjs";import{dark}from "@clerk/themes";import{Toaster}from "./_components/ui/sonner";import{ThemeProvider}from "next-themes";const mulish = Mulish({subsets:["latin-ext"],});export const metadata:Metadata ={title:"agiFinance",description:"Plataforma de gestão financeira com IA",};export default function RootLayout({children,}:Readonly<{children:React.ReactNode;}>){return ( <html lang="pt-br" suppressHydrationWarning> <body className={`${mulish.className}antialiased`}> <ThemeProvider attribute="class" defaultTheme="dark" enableSystem> <ClerkProvider appearance={{baseTheme:dark,}}> <div className="flex h-full flex-col overflow-hidden">{children}</div> </ClerkProvider> <Toaster /> </ThemeProvider> </body> </html> );}
// File: /home/israel/projetos/finance.ai/app/login/page.tsx
import Image from "next/image";import{Button}from "../_components/ui/button";import{LogInIcon}from "lucide-react";import{SignInButton}from "@clerk/nextjs";import{auth}from "@clerk/nextjs/server";import{redirect}from "next/navigation";import Logo from "../_components/logo";const LoginPage = async () =>{const{userId}= await auth();if (userId){redirect("/");}return ( <div className="relative flex min-h-screen flex-col md:grid md:h-full md:grid-cols-2">{}<div className="absolute inset-0 h-64 w-full md:hidden"> <Image src="/login.png" alt="Faça Login" fill className="object-cover" priority /> <div className="absolute inset-0 bg-gradient-to-b from-black/50 to-transparent" /> </div>{}<div className="relative z-10 flex h-full w-full max-w-full flex-col justify-center p-6 md:max-w-[550px] md:p-8"> <Logo /> <h2 className="mb-3 bg-gradient-to-r from-primary to-blue-500 bg-clip-text text-3xl font-bold leading-tight text-transparent md:text-4xl md:leading-[39px]"> Bem-vindo </h2> <p className="mb-8 text-base text-muted-foreground md:text-lg"> A agiFinance é uma plataforma de gestão financeira que utiliza IA para monitorar suas movimentações,e oferecer insights personalizados,facilitando o controle do seu orçamento. </p> <SignInButton> <Button variant="outline" className="w-full md:w-auto"> <LogInIcon className="mr-2" /> Fazer login ou Criar conta </Button> </SignInButton> </div>{}<div className="relative hidden h-full w-full md:block"> <Image src="/login.png" alt="Faça Login" fill className="object-cover" priority /> </div> </div> );};export default LoginPage;
// File: /home/israel/projetos/finance.ai/app/subscription/_actions/create-stripe-checkout/index.ts
"use server";import{auth}from "@clerk/nextjs/server";import Stripe from "stripe";export const createStripeCheckout = async () =>{const{userId}= await auth();if (!userId){throw new Error("Unauthorized");}if (!process.env.STRIPE_SECRET_KEY){throw new Error("Stripe secret key not found");}const stripe = new Stripe(process.env.STRIPE_SECRET_KEY,{apiVersion:"2024-10-28.acacia",});const session = await stripe.checkout.sessions.create({payment_method_types:["card"],mode:"subscription",success_url:"https:cancel_url:"https:subscription_data:{metadata:{clerk_user_id:userId,},},line_items:[{price:process.env.STRIPE_PREMIUM_PLAN_PRICE_ID,quantity:1,},],});return{sessionId:session.id};};
// File: /home/israel/projetos/finance.ai/app/subscription/_components/acquire-plan.tsx
"use client";import{Button}from "@/app/_components/ui/button";import{createStripeCheckout}from "../_actions/create-stripe-checkout";import{loadStripe}from "@stripe/stripe-js";import{useUser}from "@clerk/nextjs";import Link from "next/link";const AcquirePlanButton = () =>{const{user}= useUser();const handleAcquirePlanClick = async () =>{const{sessionId}= await createStripeCheckout();if (!process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY){throw new Error("Stripe publishable key not found");}const stripe = await loadStripe( process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY,);if (!stripe){throw new Error("Stripe not found");}await stripe.redirectToCheckout({sessionId});};const hasPremiumPlan = user?.publicMetadata.subscriptionPlan === "premium";if (hasPremiumPlan){return ( <Button className="w-full rounded-full font-bold" variant="link"> <Link href={`${process.env.NEXT_PUBLIC_STRIPE_CUSTOMER_PORTAL_URL as string}?prefilled_email=${user.emailAddresses[0].emailAddress}`}> Gerenciar plano </Link> </Button> );}return ( <> <Button className="w-full rounded-full font-bold" onClick={handleAcquirePlanClick}> Adquirir Plano </Button> </> );};export default AcquirePlanButton;
// File: /home/israel/projetos/finance.ai/app/subscription/page.tsx
import Navbar from "../_components/navbar";import{auth,clerkClient}from "@clerk/nextjs/server";import{redirect}from "next/navigation";import{Card,CardContent,CardHeader}from "../_components/ui/card";import{CheckIcon,XIcon,SparklesIcon}from "lucide-react";import AcquirePlanButton from "./_components/acquire-plan";import{Badge}from "../_components/ui/badge";import{getCurrentMonthTransactions}from "../_data/get-current-month-transactions";import{cn}from "../_lib/utils";const SubscriptionPage = async () =>{const{userId}= await auth();if (!userId){redirect("/login");}const user = await clerkClient().users.getUser(userId);const currentMonthTransactions = await getCurrentMonthTransactions();const hasPremiumPlan = user.publicMetadata.subscriptionPlan == "premium";return ( <> <Navbar></Navbar> <div className="mx-auto max-w-7xl space-y-8 p-6"> <div className="animate-fade-in mb-8 text-center"> <h1 className="bg-gradient-to-r from-primary to-blue-500 bg-clip-text pb-2 text-3xl font-bold text-transparent md:text-4xl"> Escolha seu Plano </h1> <p className="mt-2 text-muted-foreground"> Selecione o plano ideal para gerenciar suas finanças </p> </div> <div className="flex flex-col justify-center gap-8 md:flex-row md:gap-10"> <Card className={cn( "w-full max-w-[360px] transition-all duration-300 hover:shadow-lg md:w-[460px] md:max-w-[460px]",!hasPremiumPlan && "border-primary/30 ring-1 ring-primary/20",)}> <CardHeader className="relative border-b border-solid bg-gradient-to-b from-background to-muted/30 py-8">{!hasPremiumPlan && ( <Badge className="absolute left-4 top-11 animate-pulse bg-primary/20 text-primary"> Ativo </Badge> )}<h2 className="text-center text-2xl font-semibold"> Plano Básico </h2> <div className="mt-2 flex items-center justify-center gap-3"> <span className="text-4xl font-light">R$ </span> <span className="text-6xl font-bold text-primary">0</span> <span className="text-2xl text-muted-foreground">/mês</span> </div> </CardHeader> <CardContent className="space-y-6 py-8"> <div className="flex items-center gap-3 rounded-lg p-2 transition-colors hover:bg-muted/50"> <CheckIcon className="h-5 w-5 text-primary" /> <p className="text-sm md:text-base"> Apenas{" "}<span className="font-semibold">{currentMonthTransactions}/10 </span>{" "}transações por mês </p> </div> <div className="flex items-center gap-3 rounded-lg p-2 transition-colors hover:bg-muted/50"> <XIcon className="h-5 w-5 text-gray-400" /> <p className="text-sm text-muted-foreground md:text-base"> Relatórios com IA </p> </div> </CardContent> </Card> <Card className={cn( "w-[360px] transition-all duration-300 hover:shadow-xl md:w-[460px]",hasPremiumPlan ? "border-primary/30 ring-2 ring-primary/30":"bg-gradient-to-b from-background to-primary/5",)}> <CardHeader className="relative border-b border-solid bg-gradient-to-b from-background to-primary/10 py-8">{hasPremiumPlan && ( <Badge className="absolute left-4 top-11 animate-pulse bg-primary/20 text-primary"> Ativo </Badge> )}<div className="absolute right-4 top-4"> <Badge className="bg-gradient-to-r from-primary to-blue-500 font-medium text-white"> <SparklesIcon className="mr-1 h-3.5 w-3.5" /> Recomendado </Badge> </div> <h2 className="bg-gradient-to-r from-primary to-blue-500 bg-clip-text text-center text-2xl font-semibold text-transparent"> Plano Premium </h2> <div className="mt-2 flex items-center justify-center gap-3"> <span className="text-4xl font-light">R$ </span> <span className="bg-gradient-to-r from-primary to-blue-500 bg-clip-text text-6xl font-bold text-transparent"> 19,90 </span> <span className="text-2xl text-muted-foreground">/mês</span> </div> </CardHeader> <CardContent className="space-y-6 py-8"> <div className="flex items-center gap-3 rounded-lg p-2 transition-colors hover:bg-primary/5"> <CheckIcon className="h-5 w-5 text-primary" /> <p className="text-sm font-medium md:text-base"> Transações <span className="font-bold">ilimitadas</span> </p> </div> <div className="flex items-center gap-3 rounded-lg p-2 transition-colors hover:bg-primary/5"> <CheckIcon className="h-5 w-5 text-primary" /> <p className="text-sm font-medium md:text-base"> Relatórios com IA{" "}<span className="ml-1 rounded-full bg-primary/10 px-2 py-0.5 text-xs text-primary"> Premium </span> </p> </div> <div className="mt-6"> <AcquirePlanButton /> </div> </CardContent> </Card> </div> <div className="mt-10 text-center text-sm text-muted-foreground"> <p> Escolha o plano que melhor atende às suas necessidades financeiras </p> </div> </div> </> );};export default SubscriptionPage;
// File: /home/israel/projetos/finance.ai/app/transactions/_actions/delete-transactions/index.ts
"use server";import{db}from "@/app/_lib/prisma";import{deleteTransactionInput}from "./schema";import{revalidatePath}from "next/cache";export const deleteTransaction = async ({transactionId,}:deleteTransactionInput) =>{await db.transaction.delete({where:{id:transactionId,},});revalidatePath("/transactions");revalidatePath("/");};
// File: /home/israel/projetos/finance.ai/app/transactions/_actions/delete-transactions/schema.ts
import{z}from "zod";export const deleteTransactionSchema = z.object({transactionId:z.string().uuid(),});export type deleteTransactionInput = z.infer<typeof deleteTransactionSchema>;
// File: /home/israel/projetos/finance.ai/app/transactions/_columns/_components/delete-transaction-button.tsx
"use client";import{AlertDialog,AlertDialogAction,AlertDialogContent,AlertDialogDescription,AlertDialogFooter,AlertDialogHeader,AlertDialogTitle,AlertDialogTrigger,}from "@/app/_components/ui/alert-dialog";import{Button}from "@/app/_components/ui/button";import{AlertDialogCancel}from "@radix-ui/react-alert-dialog";import{TrashIcon}from "lucide-react";import{deleteTransaction}from "../../_actions/delete-transactions";import{toast}from "sonner";interface DeleteTransactionButtonProps{transactionId:string;}const DeleteTransactionButton = ({transactionId,}:DeleteTransactionButtonProps) =>{const handdleConfirmDeleteClick = async () =>{try{await deleteTransaction({transactionId});toast.success("Transação deletada com sucesso!");}catch (error){console.error(error);toast.error("Ocorreu um erro ao deletar a transação.");}};return ( <> <AlertDialog> <AlertDialogTrigger asChild> <Button variant="ghost" size="icon" className="h-8 w-8 p-0 sm:h-9 sm:w-9" > <TrashIcon className="h-4 w-4" /> </Button> </AlertDialogTrigger> <AlertDialogContent> <AlertDialogHeader> <AlertDialogTitle>Você tem certeza?</AlertDialogTitle> <AlertDialogDescription> Essa ação não pode ser desfeita. Isso vai permanantemente deletar essa transação dos nossos servidores. </AlertDialogDescription> </AlertDialogHeader> <AlertDialogFooter> <AlertDialogCancel>Cancelar</AlertDialogCancel> <AlertDialogAction onClick={handdleConfirmDeleteClick}> Continue </AlertDialogAction> </AlertDialogFooter> </AlertDialogContent> </AlertDialog> </> );};export default DeleteTransactionButton;
// File: /home/israel/projetos/finance.ai/app/transactions/_columns/_components/edit-transaction-button.tsx
"use client";import{PencilIcon}from "lucide-react";import{Button}from "../../../_components/ui/button";import UpsertTransactionDialog from "../../../_components/upsert-transaction-dialog";import{useState,useCallback}from "react";import{Transaction}from "@prisma/client";interface EditTransactionButtonProps{transaction:Transaction;}const EditTransactionButton = ({transaction}:EditTransactionButtonProps) =>{const [dialogIsOpen,setDialogIsOpen] = useState(false);const handleOpenDialog = useCallback(() =>{setDialogIsOpen(true);},[transaction.id]);return ( <> <Button variant="ghost" size="icon" onClick={handleOpenDialog}className="h-8 w-8 p-0 sm:h-9 sm:w-9" data-transaction-id={transaction.id}> <PencilIcon className="h-4 w-4" /> </Button> <UpsertTransactionDialog isOpen={dialogIsOpen}setIsOpen={setDialogIsOpen}defaultValues={{...transaction,amount:Number(transaction.amount),}}transactionId={transaction.id}/> </> );};export default EditTransactionButton;
// File: /home/israel/projetos/finance.ai/app/transactions/_columns/_components/type-badge.tsx
import{Badge}from "@/app/_components/ui/badge";import{Transaction,TransactionType}from "@prisma/client";import{CircleIcon}from "lucide-react";interface TrasactionTypeBadgeProps{transaction:Transaction;}const TransactionTypeBadge = ({transaction}:TrasactionTypeBadgeProps) =>{if (transaction.type === TransactionType.DEPOSIT){return ( <Badge className="bg-muted px-1.5 py-0.5 text-xs font-medium text-primary hover:bg-muted sm:px-2 sm:py-1 sm:text-sm sm:font-bold"> <CircleIcon className="mr-1 fill-primary sm:mr-2" size={8}/> <span className="hidden sm:inline">Depósito</span> <span className="inline sm:hidden">Depósit</span> </Badge> );}if (transaction.type === TransactionType.EXPENSE){return ( <Badge className="bg-danger bg-opacity-10 px-1.5 py-0.5 text-xs font-medium text-danger sm:px-2 sm:py-1 sm:text-sm sm:font-bold"> <CircleIcon className="mr-1 fill-danger sm:mr-2" size={8}/> <span className="hidden sm:inline">Despesa</span> <span className="inline sm:hidden">Desp</span> </Badge> );}return ( <Badge className="bg-white bg-opacity-10 px-1.5 py-0.5 text-xs font-medium text-white sm:px-2 sm:py-1 sm:text-sm sm:font-bold"> <CircleIcon className="mr-1 fill-white sm:mr-2" size={8}/> <span className="hidden sm:inline">Investimento</span> <span className="inline sm:hidden">Invest</span> </Badge> );};export default TransactionTypeBadge;
// File: /home/israel/projetos/finance.ai/app/transactions/_columns/index.tsx
"use client";import{Transaction}from "@prisma/client";import{ColumnDef}from "@tanstack/react-table";import TransactionTypeBadge from "./_components/type-badge";import{TRANSACTION_CATEGORY_LABELS,TRANSACTION_PAYMENT_METHOD_LABELS,}from "@/app/_constants/transactions";import EditTransactionButton from "./_components/edit-transaction-button";import DeleteTransactionButton from "./_components/delete-transaction-button";export const transactionColumns:ColumnDef<Transaction>[] = [{id:"name",accessorKey:"name",header:"Nome",cell:({row:{original:transaction}}) => ( <div className="max-w-[80px] truncate font-medium sm:max-w-none">{transaction.name}</div> ),},{id:"type",accessorKey:"type",header:"Tipo",cell:({row:{original:transaction}}) => ( <div className="flex justify-center"> <TransactionTypeBadge transaction={transaction}/> </div> ),},{id:"category",accessorKey:"category",header:() => <span className="hidden md:inline">Categoria</span>,cell:({row:{original:transaction}}) => ( <div className="hidden md:block">{TRANSACTION_CATEGORY_LABELS[transaction.category]}</div> ),},{id:"paymentMethod",accessorKey:"paymentMethod",header:() => <span className="hidden md:inline">Metodo de pagamento</span>,cell:({row:{original:transaction}}) => ( <div className="hidden md:block">{TRANSACTION_PAYMENT_METHOD_LABELS[transaction.paymentMethod]}</div> ),},{id:"date",accessorKey:"date",header:"Data",cell:({row:{original:transaction}}) =>{const mobileDate = new Date(transaction.date).toLocaleDateString( "pt-BR",{day:"2-digit",month:"2-digit",},);const desktopDate = new Date(transaction.date).toLocaleDateString( "pt-BR",{day:"2-digit",month:"long",year:"numeric",},);return ( <div className="whitespace-nowrap"> <span className="inline sm:hidden">{mobileDate}</span> <span className="hidden sm:inline">{desktopDate}</span> </div> );},},{id:"amount",accessorKey:"amount",header:"Valor",cell:({row:{original:transaction}}) =>{const formattedAmount = new Intl.NumberFormat("pt-BR",{style:"currency",currency:"BRL",}).format(Number(transaction.amount));return ( <div className="whitespace-nowrap font-medium">{formattedAmount}</div> );},},{id:"actions",accessorKey:"actions",header:"Ações",cell:({row:{original:transaction}}) =>{return ( <div className="flex items-center justify-center gap-0 sm:gap-1"> <EditTransactionButton transaction={transaction}/> <DeleteTransactionButton transactionId={transaction.id}/> </div> );},},];
// File: /home/israel/projetos/finance.ai/app/transactions/page.tsx
import{db}from "../_lib/prisma";import{DataTable}from "../_components/ui/data-table";import{transactionColumns}from "./_columns";import AddTransactionButton from "../_components/add-transaction-button";import Navbar from "../_components/navbar";import{auth}from "@clerk/nextjs/server";import{redirect}from "next/navigation";import{ScrollArea}from "../_components/ui/scroll-area";import{canUserAddTransaction}from "../_data/can-user-add-transaction";const TransactionsPage = async () =>{const{userId}= await auth();if (!userId){redirect("/login");}const transactions = await db.transaction.findMany({where:{userId,},orderBy:{date:"desc",},});const canUserAddTransactions = await canUserAddTransaction();return ( <> <Navbar></Navbar> <div className="space-y-4 overflow-hidden p-4 sm:space-y-6 sm:p-6"> <div className="flex w-full flex-col gap-3 sm:flex-row sm:items-center sm:justify-between"> <h1 className="text-xl font-bold sm:text-2xl">Transações</h1> <AddTransactionButton userCanAddTransaction={canUserAddTransactions}/> </div> <ScrollArea className="h-auto max-h-[calc(100vh-180px)]"> <DataTable columns={transactionColumns}data={JSON.parse(JSON.stringify(transactions))}/> </ScrollArea> </div> </> );};export default TransactionsPage;
// File: /home/israel/projetos/finance.ai/concat-code.js
const fs = require('fs');const path = require('path');const{promisify}= require('util');const readFileAsync = promisify(fs.readFile);const writeFileAsync = promisify(fs.writeFile);const extensions = ['.js','.jsx','.ts','.tsx'];const ignoreDirs = ['node_modules','.next','.git','.vscode'];const shouldProcessFile = (filePath) =>{const ext = path.extname(filePath).toLowerCase();return extensions.includes(ext);};const shouldIgnoreDir = (dirPath) =>{const dirName = path.basename(dirPath);return ignoreDirs.includes(dirName);};async function findAllFiles(dir,fileList = []){const files = fs.readdirSync(dir);for (const file of files){const filePath = path.join(dir,file);const stat = fs.statSync(filePath);if (stat.isDirectory()){if (!shouldIgnoreDir(filePath)){await findAllFiles(filePath,fileList);}}else if (shouldProcessFile(filePath)){fileList.push(filePath);}}return fileList;}async function processFile(filePath){try{const content = await readFileAsync(filePath,'utf8');let processedContent = content .replace(/\/\*[\s\S]*?\*\/|\/\/.*/g,'') .replace(/\s+/g,' ') .replace(/\s*{\s*/g,'{') .replace(/\s*}\s*/g,'}') .replace(/\s*;\s*/g,';') .replace(/\s*:\s*/g,':') .replace(/\s*,\s*/g,',') .trim();return `\n}catch (error){console.error(`Error processing file ${filePath}:`,error.message);return `\n}}async function main(){const rootDir = process.cwd();console.log(`Searching for files in ${rootDir}...`);const files = await findAllFiles(rootDir);console.log(`Found ${files.length}files to process.`);let allCode = ' let processedCount = 0;for (const file of files){process.stdout.write(`Processing file ${++processedCount}/${files.length}:${file}...\r`);const processedCode = await processFile(file);allCode += processedCode;}const outputPath = path.join(rootDir,'all-code-concatenated.js');await writeFileAsync(outputPath,allCode,'utf8');console.log(`\nAll files processed. Concatenated code saved to ${outputPath}`);console.log(`Total size:${(allCode.length / 1024).toFixed(2)}KB`);}main().catch(console.error);
// File: /home/israel/projetos/finance.ai/lib/utils.ts
import{type ClassValue,clsx}from "clsx";import{twMerge}from "tailwind-merge";export function cn(...inputs:ClassValue[]){return twMerge(clsx(inputs));}
// File: /home/israel/projetos/finance.ai/middleware.ts
import{clerkMiddleware}from "@clerk/nextjs/server";export default clerkMiddleware();export const config ={matcher:[ '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)','/(api|trpc)(.*)',],};
// File: /home/israel/projetos/finance.ai/minify-js.js
const fs = require('fs');const path = require('path');const{minify}= require('terser');const{promisify}= require('util');const readFileAsync = promisify(fs.readFile);const writeFileAsync = promisify(fs.writeFile);const extensions = ['.js','.jsx','.ts','.tsx'];const ignoreDirs = ['node_modules','.next','.git','.vscode'];const terserOptions ={compress:{dead_code:true,drop_console:false,drop_debugger:true,keep_classnames:true,keep_fargs:true,keep_infinity:true,},mangle:false,format:{comments:false,beautify:false,},keep_classnames:true,keep_fnames:true,};const shouldProcessFile = (filePath) =>{const ext = path.extname(filePath).toLowerCase();return extensions.includes(ext);};const shouldIgnoreDir = (dirPath) =>{const dirName = path.basename(dirPath);return ignoreDirs.includes(dirName);};async function findAllFiles(dir,fileList = []){const files = fs.readdirSync(dir);for (const file of files){const filePath = path.join(dir,file);const stat = fs.statSync(filePath);if (stat.isDirectory()){if (!shouldIgnoreDir(filePath)){await findAllFiles(filePath,fileList);}}else if (shouldProcessFile(filePath)){fileList.push(filePath);}}return fileList;}async function minifyFile(filePath){try{const content = await readFileAsync(filePath,'utf8');const result = await minify(content,terserOptions);return `\n}catch (error){console.error(`Error processing file ${filePath}:`,error.message);return `\n}}async function main(){const rootDir = process.cwd();console.log(`Searching for files in ${rootDir}...`);const files = await findAllFiles(rootDir);console.log(`Found ${files.length}files to process.`);let allMinifiedCode = ' let processedCount = 0;for (const file of files){process.stdout.write(`Processing file ${++processedCount}/${files.length}:${file}...\r`);const minifiedCode = await minifyFile(file);allMinifiedCode += minifiedCode;}const outputPath = path.join(rootDir,'all-minified-code.js');await writeFileAsync(outputPath,allMinifiedCode,'utf8');console.log(`\nAll files processed. Minified code saved to ${outputPath}`);console.log(`Total size:${(allMinifiedCode.length / 1024).toFixed(2)}KB`);}main().catch(console.error);
// File: /home/israel/projetos/finance.ai/next-env.d.ts

// File: /home/israel/projetos/finance.ai/postcss.config.js
module.exports ={plugins:{tailwindcss:{},autoprefixer:{},},};
// File: /home/israel/projetos/finance.ai/tailwind.config.ts
import type{Config}from "tailwindcss";const config:Config ={darkMode:"class",content:[ "./pages*.{js,ts,jsx,tsx,mdx}","./components*.{js,ts,jsx,tsx,mdx}","./app*.{js,ts,jsx,tsx,mdx}",],theme:{extend:{colors:{background:"hsl(var(--background))",foreground:"hsl(var(--foreground))",danger:"#f6352e",card:{DEFAULT:"hsl(var(--card))",foreground:"hsl(var(--card-foreground))",},popover:{DEFAULT:"hsl(var(--popover))",foreground:"hsl(var(--popover-foreground))",},primary:{DEFAULT:"hsl(var(--primary))",foreground:"hsl(var(--primary-foreground))",},secondary:{DEFAULT:"hsl(var(--secondary))",foreground:"hsl(var(--secondary-foreground))",},muted:{DEFAULT:"hsl(var(--muted))",foreground:"hsl(var(--muted-foreground))",},accent:{DEFAULT:"hsl(var(--accent))",foreground:"hsl(var(--accent-foreground))",},destructive:{DEFAULT:"hsl(var(--destructive))",foreground:"hsl(var(--destructive-foreground))",},border:"hsl(var(--border))",input:"hsl(var(--input))",ring:"hsl(var(--ring))",chart:{1:"hsl(var(--chart-1))",2:"hsl(var(--chart-2))",3:"hsl(var(--chart-3))",4:"hsl(var(--chart-4))",5:"hsl(var(--chart-5))",},},borderRadius:{lg:"var(--radius)",md:"calc(var(--radius) - 2px)",sm:"calc(var(--radius) - 4px)",},},},plugins:[require("tailwindcss-animate"),require("@tailwindcss/typography")],};export default config;